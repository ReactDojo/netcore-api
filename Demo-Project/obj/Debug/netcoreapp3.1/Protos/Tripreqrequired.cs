// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/tripreqrequired.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DemoProject.Web.Protobufs.V1 {

  /// <summary>Holder for reflection information generated from protos/tripreqrequired.proto</summary>
  public static partial class TripreqrequiredReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/tripreqrequired.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TripreqrequiredReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chxwcm90b3MvdHJpcHJlcXJlcXVpcmVkLnByb3RvEgJ2MRoeZ29vZ2xlL3By",
            "b3RvYnVmL3dyYXBwZXJzLnByb3RvIi8KGkdldFRyaXBzUmVxUmVxdWlyZWRS",
            "ZXF1ZXN0EhEKCWRhdGFMaW1pdBgBIAEoBSLPDAoPVHJpcFJlcVJlcXVpcmVk",
            "Eg8KB1RyaXBOdW0YASABKAUSDgoGUHJlZml4GAIgASgJEi0KCEJpbGxyYXRl",
            "GAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSDwoHUmVxZGF0",
            "ZRgEIAEoCRIMCgRGdW5kGAUgASgJEhAKCEN1c3RvbWVyGAYgASgJEhAKCExv",
            "Y2F0aW9uGAcgASgJEhAKCEJpbGxjdXN0GAggASgJEg8KB0NvbnRhY3QYCSAB",
            "KAkSEwoLRGVzdGluYXRpb24YCiABKAUSDwoHRGVwZGF0ZRgLIAEoCRIPCgdE",
            "ZXB0aW1lGAwgASgJEg8KB1JldGRhdGUYDSABKAkSDwoHUmV0dGltZRgOIAEo",
            "CRISCgpBcnJpdmV0aW1lGA8gASgJEhEKCUxlYXZldGltZRgQIAEoCRIsCgdF",
            "c3RtaWxlGBEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSLAoH",
            "RXN0dGltZRgSIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEhMK",
            "C051bXN0dWRlbnRzGBMgASgFEhEKCU51bWFkdWx0cxgUIAEoBRIsCgdOdW1o",
            "YW5kGBUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSDwoHUHVy",
            "cG9zZRgWIAEoCRIQCghEZXN0c3BlYxgXIAEoCRIRCglPdXRvZnRvd24YGCAB",
            "KAgSEAoIU2NoZWR1bGUYGSABKAkSEQoJU2NoZWR1bGUyGBogASgJEhEKCVNj",
            "aGVkdWxlMxgbIAEoCRIRCglTY2hlZHVsZTQYHCABKAkSEQoJU2NoZWR1bGU1",
            "GB0gASgJEhYKDkNhbGNudW1kcml2ZXJzGB4gASgIEgwKBFR5cGUYHyABKAkS",
            "DwoHTnVtdHlwZRggIAEoBRIQCghDYXBhY2l0eRghIAEoCRIQCghBZGRsdHlw",
            "ZRgiIAEoCRIPCgdOdW1hZGRsGCMgASgFEgwKBEJpbGwYJCABKAgSEAoIQ3Vz",
            "dHNwZWMYJSABKAkSEAoIQXNzaWduZWQYJiABKAgSDgoGQmlsbGVkGCcgASgI",
            "EhAKCEJpbGxkYXRlGCggASgJEhAKCENhbmNlbGVkGCkgASgIEg8KB0NhbmRh",
            "dGUYKiABKAkSDgoGTnVtdmVoGCsgASgFEg8KB0Ryb3ByZXQYLCABKAgSDwoH",
            "VHJpcGNvbRgtIAEoCRISCgpBdXRvYXNzaWduGC4gASgIEgoKAlBvGC8gASgJ",
            "Eg8KB1RyaXBjYXQYMCABKAkSEgoKSW50dHJpcG51bRgxIAEoCRISCgpUcmlw",
            "cmVxbnVtGDIgASgFEg8KB0Ftb3VudDEYMyABKAISDwoHQW1vdW50Mhg0IAEo",
            "AhIPCgdBbW91bnQzGDUgASgCEg8KB0Ftb3VudDQYNiABKAISDwoHQW1vdW50",
            "NRg3IAEoAhISCgpBbW91bnR0eHQxGDggASgJEhIKCkFtb3VudHR4dDIYOSAB",
            "KAkSEgoKQW1vdW50dHh0Mxg6IAEoCRISCgpBbW91bnR0eHQ0GDsgASgJEhIK",
            "CkFtb3VudHR4dDUYPCABKAkSDQoFR3JhZGUYPSABKAkSDQoFU3BsaXQYPiAB",
            "KAgSFQoNSW52b2ljZUZvcm1hdBg/IAEoCRIXCg9JbnZvaWNlQ29tbWVudDEY",
            "QCABKAkSEQoJTXVsdGlkZXN0GEEgASgIEg8KB1NodXR0bGUYQiABKAgSFAoM",
            "VGlja2V0Rm9ybWF0GEMgASgJEg8KB051bWNoYXIYRCABKAUSFgoOUmVxdWVz",
            "dG9yRW1haWwYRSABKAkSGgoSQWRtaW5pc3RyYXRvckVtYWlsGEYgASgJEhUK",
            "DUFwcHJvdmVyRW1haWwYRyABKAkSEwoLRGF0ZUVudGVyZWQYSCABKAkSEwoL",
            "VXNlckVudGVyZWQYSSABKAkSFwoPRGF0ZUxhc3RjaGFuZ2VkGEogASgJEhcK",
            "D1VzZXJMYXN0Y2hhbmdlZBhLIAEoCRINCgVVc2VyMRhMIAEoCRINCgVVc2Vy",
            "MhhNIAEoCRIRCglVc2VyZGF0ZTEYTiABKAkSEQoJVXNlcmRhdGUyGE8gASgJ",
            "EhUKDVNzbWFUaW1lU3RhbXAYUCABKAki2wwKG0dldFRyaXBzUmVxUmVxdWly",
            "ZWRSZXNwb25zZRIPCgdUcmlwTnVtGAEgASgFEg4KBlByZWZpeBgCIAEoCRIt",
            "CghCaWxscmF0ZRgDIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVl",
            "Eg8KB1JlcWRhdGUYBCABKAkSDAoERnVuZBgFIAEoCRIQCghDdXN0b21lchgG",
            "IAEoCRIQCghMb2NhdGlvbhgHIAEoCRIQCghCaWxsY3VzdBgIIAEoCRIPCgdD",
            "b250YWN0GAkgASgJEhMKC0Rlc3RpbmF0aW9uGAogASgFEg8KB0RlcGRhdGUY",
            "CyABKAkSDwoHRGVwdGltZRgMIAEoCRIPCgdSZXRkYXRlGA0gASgJEg8KB1Jl",
            "dHRpbWUYDiABKAkSEgoKQXJyaXZldGltZRgPIAEoCRIRCglMZWF2ZXRpbWUY",
            "ECABKAkSLAoHRXN0bWlsZRgRIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9h",
            "dFZhbHVlEiwKB0VzdHRpbWUYEiABKAsyGy5nb29nbGUucHJvdG9idWYuRmxv",
            "YXRWYWx1ZRITCgtOdW1zdHVkZW50cxgTIAEoBRIRCglOdW1hZHVsdHMYFCAB",
            "KAUSLAoHTnVtaGFuZBgVIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZh",
            "bHVlEg8KB1B1cnBvc2UYFiABKAkSEAoIRGVzdHNwZWMYFyABKAkSEQoJT3V0",
            "b2Z0b3duGBggASgIEhAKCFNjaGVkdWxlGBkgASgJEhEKCVNjaGVkdWxlMhga",
            "IAEoCRIRCglTY2hlZHVsZTMYGyABKAkSEQoJU2NoZWR1bGU0GBwgASgJEhEK",
            "CVNjaGVkdWxlNRgdIAEoCRIWCg5DYWxjbnVtZHJpdmVycxgeIAEoCBIMCgRU",
            "eXBlGB8gASgJEg8KB051bXR5cGUYICABKAUSEAoIQ2FwYWNpdHkYISABKAkS",
            "EAoIQWRkbHR5cGUYIiABKAkSDwoHTnVtYWRkbBgjIAEoBRIMCgRCaWxsGCQg",
            "ASgIEhAKCEN1c3RzcGVjGCUgASgJEhAKCEFzc2lnbmVkGCYgASgIEg4KBkJp",
            "bGxlZBgnIAEoCBIQCghCaWxsZGF0ZRgoIAEoCRIQCghDYW5jZWxlZBgpIAEo",
            "CBIPCgdDYW5kYXRlGCogASgJEg4KBk51bXZlaBgrIAEoBRIPCgdEcm9wcmV0",
            "GCwgASgIEg8KB1RyaXBjb20YLSABKAkSEgoKQXV0b2Fzc2lnbhguIAEoCBIK",
            "CgJQbxgvIAEoCRIPCgdUcmlwY2F0GDAgASgJEhIKCkludHRyaXBudW0YMSAB",
            "KAkSEgoKVHJpcHJlcW51bRgyIAEoBRIPCgdBbW91bnQxGDMgASgCEg8KB0Ft",
            "b3VudDIYNCABKAISDwoHQW1vdW50Mxg1IAEoAhIPCgdBbW91bnQ0GDYgASgC",
            "Eg8KB0Ftb3VudDUYNyABKAISEgoKQW1vdW50dHh0MRg4IAEoCRISCgpBbW91",
            "bnR0eHQyGDkgASgJEhIKCkFtb3VudHR4dDMYOiABKAkSEgoKQW1vdW50dHh0",
            "NBg7IAEoCRISCgpBbW91bnR0eHQ1GDwgASgJEg0KBUdyYWRlGD0gASgJEg0K",
            "BVNwbGl0GD4gASgIEhUKDUludm9pY2VGb3JtYXQYPyABKAkSFwoPSW52b2lj",
            "ZUNvbW1lbnQxGEAgASgJEhEKCU11bHRpZGVzdBhBIAEoCBIPCgdTaHV0dGxl",
            "GEIgASgIEhQKDFRpY2tldEZvcm1hdBhDIAEoCRIPCgdOdW1jaGFyGEQgASgF",
            "EhYKDlJlcXVlc3RvckVtYWlsGEUgASgJEhoKEkFkbWluaXN0cmF0b3JFbWFp",
            "bBhGIAEoCRIVCg1BcHByb3ZlckVtYWlsGEcgASgJEhMKC0RhdGVFbnRlcmVk",
            "GEggASgJEhMKC1VzZXJFbnRlcmVkGEkgASgJEhcKD0RhdGVMYXN0Y2hhbmdl",
            "ZBhKIAEoCRIXCg9Vc2VyTGFzdGNoYW5nZWQYSyABKAkSDQoFVXNlcjEYTCAB",
            "KAkSDQoFVXNlcjIYTSABKAkSEQoJVXNlcmRhdGUxGE4gASgJEhEKCVVzZXJk",
            "YXRlMhhPIAEoCRIVCg1Tc21hVGltZVN0YW1wGFAgASgJIh8KHUdldEFsbFRy",
            "aXBzUmVxUmVxdWlyZWRSZXF1ZXN0IkQKHkdldEFsbFRyaXBzUmVxUmVxdWly",
            "ZWRSZXNwb25zZRIiCgVUcmlwcxgFIAMoCzITLnYxLlRyaXBSZXFSZXF1aXJl",
            "ZDKmAgoTVHJpcFJlcVJlcXVpcmVkRGF0YRJYChNHZXRUcmlwc1JlcVJlcXVp",
            "cmVkEh4udjEuR2V0VHJpcHNSZXFSZXF1aXJlZFJlcXVlc3QaHy52MS5HZXRU",
            "cmlwc1JlcVJlcXVpcmVkUmVzcG9uc2UwARJnCh5HZXRBbGxUcmlwc1JlcVJl",
            "cXVpcmVkUmVxVW5hcnkSIS52MS5HZXRBbGxUcmlwc1JlcVJlcXVpcmVkUmVx",
            "dWVzdBoiLnYxLkdldEFsbFRyaXBzUmVxUmVxdWlyZWRSZXNwb25zZRJMCgZD",
            "cmVhdGUSHi52MS5HZXRUcmlwc1JlcVJlcXVpcmVkUmVxdWVzdBoiLnYxLkdl",
            "dEFsbFRyaXBzUmVxUmVxdWlyZWRSZXNwb25zZUIfqgIcRGVtb1Byb2plY3Qu",
            "V2ViLlByb3RvYnVmcy5WMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DemoProject.Web.Protobufs.V1.GetTripsReqRequiredRequest), global::DemoProject.Web.Protobufs.V1.GetTripsReqRequiredRequest.Parser, new[]{ "DataLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DemoProject.Web.Protobufs.V1.TripReqRequired), global::DemoProject.Web.Protobufs.V1.TripReqRequired.Parser, new[]{ "TripNum", "Prefix", "Billrate", "Reqdate", "Fund", "Customer", "Location", "Billcust", "Contact", "Destination", "Depdate", "Deptime", "Retdate", "Rettime", "Arrivetime", "Leavetime", "Estmile", "Esttime", "Numstudents", "Numadults", "Numhand", "Purpose", "Destspec", "Outoftown", "Schedule", "Schedule2", "Schedule3", "Schedule4", "Schedule5", "Calcnumdrivers", "Type", "Numtype", "Capacity", "Addltype", "Numaddl", "Bill", "Custspec", "Assigned", "Billed", "Billdate", "Canceled", "Candate", "Numveh", "Dropret", "Tripcom", "Autoassign", "Po", "Tripcat", "Inttripnum", "Tripreqnum", "Amount1", "Amount2", "Amount3", "Amount4", "Amount5", "Amounttxt1", "Amounttxt2", "Amounttxt3", "Amounttxt4", "Amounttxt5", "Grade", "Split", "InvoiceFormat", "InvoiceComment1", "Multidest", "Shuttle", "TicketFormat", "Numchar", "RequestorEmail", "AdministratorEmail", "ApproverEmail", "DateEntered", "UserEntered", "DateLastchanged", "UserLastchanged", "User1", "User2", "Userdate1", "Userdate2", "SsmaTimeStamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DemoProject.Web.Protobufs.V1.GetTripsReqRequiredResponse), global::DemoProject.Web.Protobufs.V1.GetTripsReqRequiredResponse.Parser, new[]{ "TripNum", "Prefix", "Billrate", "Reqdate", "Fund", "Customer", "Location", "Billcust", "Contact", "Destination", "Depdate", "Deptime", "Retdate", "Rettime", "Arrivetime", "Leavetime", "Estmile", "Esttime", "Numstudents", "Numadults", "Numhand", "Purpose", "Destspec", "Outoftown", "Schedule", "Schedule2", "Schedule3", "Schedule4", "Schedule5", "Calcnumdrivers", "Type", "Numtype", "Capacity", "Addltype", "Numaddl", "Bill", "Custspec", "Assigned", "Billed", "Billdate", "Canceled", "Candate", "Numveh", "Dropret", "Tripcom", "Autoassign", "Po", "Tripcat", "Inttripnum", "Tripreqnum", "Amount1", "Amount2", "Amount3", "Amount4", "Amount5", "Amounttxt1", "Amounttxt2", "Amounttxt3", "Amounttxt4", "Amounttxt5", "Grade", "Split", "InvoiceFormat", "InvoiceComment1", "Multidest", "Shuttle", "TicketFormat", "Numchar", "RequestorEmail", "AdministratorEmail", "ApproverEmail", "DateEntered", "UserEntered", "DateLastchanged", "UserLastchanged", "User1", "User2", "Userdate1", "Userdate2", "SsmaTimeStamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DemoProject.Web.Protobufs.V1.GetAllTripsReqRequiredRequest), global::DemoProject.Web.Protobufs.V1.GetAllTripsReqRequiredRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DemoProject.Web.Protobufs.V1.GetAllTripsReqRequiredResponse), global::DemoProject.Web.Protobufs.V1.GetAllTripsReqRequiredResponse.Parser, new[]{ "Trips" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetTripsReqRequiredRequest : pb::IMessage<GetTripsReqRequiredRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetTripsReqRequiredRequest> _parser = new pb::MessageParser<GetTripsReqRequiredRequest>(() => new GetTripsReqRequiredRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTripsReqRequiredRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DemoProject.Web.Protobufs.V1.TripreqrequiredReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTripsReqRequiredRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTripsReqRequiredRequest(GetTripsReqRequiredRequest other) : this() {
      dataLimit_ = other.dataLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTripsReqRequiredRequest Clone() {
      return new GetTripsReqRequiredRequest(this);
    }

    /// <summary>Field number for the "dataLimit" field.</summary>
    public const int DataLimitFieldNumber = 1;
    private int dataLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataLimit {
      get { return dataLimit_; }
      set {
        dataLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTripsReqRequiredRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTripsReqRequiredRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataLimit != other.DataLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataLimit != 0) hash ^= DataLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DataLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DataLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DataLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTripsReqRequiredRequest other) {
      if (other == null) {
        return;
      }
      if (other.DataLimit != 0) {
        DataLimit = other.DataLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataLimit = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DataLimit = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TripReqRequired : pb::IMessage<TripReqRequired>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TripReqRequired> _parser = new pb::MessageParser<TripReqRequired>(() => new TripReqRequired());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TripReqRequired> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DemoProject.Web.Protobufs.V1.TripreqrequiredReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TripReqRequired() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TripReqRequired(TripReqRequired other) : this() {
      tripNum_ = other.tripNum_;
      prefix_ = other.prefix_;
      Billrate = other.Billrate;
      reqdate_ = other.reqdate_;
      fund_ = other.fund_;
      customer_ = other.customer_;
      location_ = other.location_;
      billcust_ = other.billcust_;
      contact_ = other.contact_;
      destination_ = other.destination_;
      depdate_ = other.depdate_;
      deptime_ = other.deptime_;
      retdate_ = other.retdate_;
      rettime_ = other.rettime_;
      arrivetime_ = other.arrivetime_;
      leavetime_ = other.leavetime_;
      Estmile = other.Estmile;
      Esttime = other.Esttime;
      numstudents_ = other.numstudents_;
      numadults_ = other.numadults_;
      Numhand = other.Numhand;
      purpose_ = other.purpose_;
      destspec_ = other.destspec_;
      outoftown_ = other.outoftown_;
      schedule_ = other.schedule_;
      schedule2_ = other.schedule2_;
      schedule3_ = other.schedule3_;
      schedule4_ = other.schedule4_;
      schedule5_ = other.schedule5_;
      calcnumdrivers_ = other.calcnumdrivers_;
      type_ = other.type_;
      numtype_ = other.numtype_;
      capacity_ = other.capacity_;
      addltype_ = other.addltype_;
      numaddl_ = other.numaddl_;
      bill_ = other.bill_;
      custspec_ = other.custspec_;
      assigned_ = other.assigned_;
      billed_ = other.billed_;
      billdate_ = other.billdate_;
      canceled_ = other.canceled_;
      candate_ = other.candate_;
      numveh_ = other.numveh_;
      dropret_ = other.dropret_;
      tripcom_ = other.tripcom_;
      autoassign_ = other.autoassign_;
      po_ = other.po_;
      tripcat_ = other.tripcat_;
      inttripnum_ = other.inttripnum_;
      tripreqnum_ = other.tripreqnum_;
      amount1_ = other.amount1_;
      amount2_ = other.amount2_;
      amount3_ = other.amount3_;
      amount4_ = other.amount4_;
      amount5_ = other.amount5_;
      amounttxt1_ = other.amounttxt1_;
      amounttxt2_ = other.amounttxt2_;
      amounttxt3_ = other.amounttxt3_;
      amounttxt4_ = other.amounttxt4_;
      amounttxt5_ = other.amounttxt5_;
      grade_ = other.grade_;
      split_ = other.split_;
      invoiceFormat_ = other.invoiceFormat_;
      invoiceComment1_ = other.invoiceComment1_;
      multidest_ = other.multidest_;
      shuttle_ = other.shuttle_;
      ticketFormat_ = other.ticketFormat_;
      numchar_ = other.numchar_;
      requestorEmail_ = other.requestorEmail_;
      administratorEmail_ = other.administratorEmail_;
      approverEmail_ = other.approverEmail_;
      dateEntered_ = other.dateEntered_;
      userEntered_ = other.userEntered_;
      dateLastchanged_ = other.dateLastchanged_;
      userLastchanged_ = other.userLastchanged_;
      user1_ = other.user1_;
      user2_ = other.user2_;
      userdate1_ = other.userdate1_;
      userdate2_ = other.userdate2_;
      ssmaTimeStamp_ = other.ssmaTimeStamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TripReqRequired Clone() {
      return new TripReqRequired(this);
    }

    /// <summary>Field number for the "TripNum" field.</summary>
    public const int TripNumFieldNumber = 1;
    private int tripNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TripNum {
      get { return tripNum_; }
      set {
        tripNum_ = value;
      }
    }

    /// <summary>Field number for the "Prefix" field.</summary>
    public const int PrefixFieldNumber = 2;
    private string prefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prefix {
      get { return prefix_; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Billrate" field.</summary>
    public const int BillrateFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_billrate_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? billrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Billrate {
      get { return billrate_; }
      set {
        billrate_ = value;
      }
    }


    /// <summary>Field number for the "Reqdate" field.</summary>
    public const int ReqdateFieldNumber = 4;
    private string reqdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reqdate {
      get { return reqdate_; }
      set {
        reqdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fund" field.</summary>
    public const int FundFieldNumber = 5;
    private string fund_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fund {
      get { return fund_; }
      set {
        fund_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Customer" field.</summary>
    public const int CustomerFieldNumber = 6;
    private string customer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Customer {
      get { return customer_; }
      set {
        customer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Location" field.</summary>
    public const int LocationFieldNumber = 7;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Billcust" field.</summary>
    public const int BillcustFieldNumber = 8;
    private string billcust_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Billcust {
      get { return billcust_; }
      set {
        billcust_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Contact" field.</summary>
    public const int ContactFieldNumber = 9;
    private string contact_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contact {
      get { return contact_; }
      set {
        contact_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Destination" field.</summary>
    public const int DestinationFieldNumber = 10;
    private int destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    /// <summary>Field number for the "Depdate" field.</summary>
    public const int DepdateFieldNumber = 11;
    private string depdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Depdate {
      get { return depdate_; }
      set {
        depdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Deptime" field.</summary>
    public const int DeptimeFieldNumber = 12;
    private string deptime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deptime {
      get { return deptime_; }
      set {
        deptime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Retdate" field.</summary>
    public const int RetdateFieldNumber = 13;
    private string retdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Retdate {
      get { return retdate_; }
      set {
        retdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rettime" field.</summary>
    public const int RettimeFieldNumber = 14;
    private string rettime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rettime {
      get { return rettime_; }
      set {
        rettime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Arrivetime" field.</summary>
    public const int ArrivetimeFieldNumber = 15;
    private string arrivetime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arrivetime {
      get { return arrivetime_; }
      set {
        arrivetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Leavetime" field.</summary>
    public const int LeavetimeFieldNumber = 16;
    private string leavetime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Leavetime {
      get { return leavetime_; }
      set {
        leavetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Estmile" field.</summary>
    public const int EstmileFieldNumber = 17;
    private static readonly pb::FieldCodec<float?> _single_estmile_codec = pb::FieldCodec.ForStructWrapper<float>(138);
    private float? estmile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Estmile {
      get { return estmile_; }
      set {
        estmile_ = value;
      }
    }


    /// <summary>Field number for the "Esttime" field.</summary>
    public const int EsttimeFieldNumber = 18;
    private static readonly pb::FieldCodec<float?> _single_esttime_codec = pb::FieldCodec.ForStructWrapper<float>(146);
    private float? esttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Esttime {
      get { return esttime_; }
      set {
        esttime_ = value;
      }
    }


    /// <summary>Field number for the "Numstudents" field.</summary>
    public const int NumstudentsFieldNumber = 19;
    private int numstudents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numstudents {
      get { return numstudents_; }
      set {
        numstudents_ = value;
      }
    }

    /// <summary>Field number for the "Numadults" field.</summary>
    public const int NumadultsFieldNumber = 20;
    private int numadults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numadults {
      get { return numadults_; }
      set {
        numadults_ = value;
      }
    }

    /// <summary>Field number for the "Numhand" field.</summary>
    public const int NumhandFieldNumber = 21;
    private static readonly pb::FieldCodec<int?> _single_numhand_codec = pb::FieldCodec.ForStructWrapper<int>(170);
    private int? numhand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Numhand {
      get { return numhand_; }
      set {
        numhand_ = value;
      }
    }


    /// <summary>Field number for the "Purpose" field.</summary>
    public const int PurposeFieldNumber = 22;
    private string purpose_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Purpose {
      get { return purpose_; }
      set {
        purpose_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Destspec" field.</summary>
    public const int DestspecFieldNumber = 23;
    private string destspec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destspec {
      get { return destspec_; }
      set {
        destspec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Outoftown" field.</summary>
    public const int OutoftownFieldNumber = 24;
    private bool outoftown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Outoftown {
      get { return outoftown_; }
      set {
        outoftown_ = value;
      }
    }

    /// <summary>Field number for the "Schedule" field.</summary>
    public const int ScheduleFieldNumber = 25;
    private string schedule_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule {
      get { return schedule_; }
      set {
        schedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Schedule2" field.</summary>
    public const int Schedule2FieldNumber = 26;
    private string schedule2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule2 {
      get { return schedule2_; }
      set {
        schedule2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Schedule3" field.</summary>
    public const int Schedule3FieldNumber = 27;
    private string schedule3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule3 {
      get { return schedule3_; }
      set {
        schedule3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Schedule4" field.</summary>
    public const int Schedule4FieldNumber = 28;
    private string schedule4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule4 {
      get { return schedule4_; }
      set {
        schedule4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Schedule5" field.</summary>
    public const int Schedule5FieldNumber = 29;
    private string schedule5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule5 {
      get { return schedule5_; }
      set {
        schedule5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Calcnumdrivers" field.</summary>
    public const int CalcnumdriversFieldNumber = 30;
    private bool calcnumdrivers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Calcnumdrivers {
      get { return calcnumdrivers_; }
      set {
        calcnumdrivers_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 31;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Numtype" field.</summary>
    public const int NumtypeFieldNumber = 32;
    private int numtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numtype {
      get { return numtype_; }
      set {
        numtype_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 33;
    private string capacity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Capacity {
      get { return capacity_; }
      set {
        capacity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Addltype" field.</summary>
    public const int AddltypeFieldNumber = 34;
    private string addltype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addltype {
      get { return addltype_; }
      set {
        addltype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Numaddl" field.</summary>
    public const int NumaddlFieldNumber = 35;
    private int numaddl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numaddl {
      get { return numaddl_; }
      set {
        numaddl_ = value;
      }
    }

    /// <summary>Field number for the "Bill" field.</summary>
    public const int BillFieldNumber = 36;
    private bool bill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bill {
      get { return bill_; }
      set {
        bill_ = value;
      }
    }

    /// <summary>Field number for the "Custspec" field.</summary>
    public const int CustspecFieldNumber = 37;
    private string custspec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Custspec {
      get { return custspec_; }
      set {
        custspec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Assigned" field.</summary>
    public const int AssignedFieldNumber = 38;
    private bool assigned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Assigned {
      get { return assigned_; }
      set {
        assigned_ = value;
      }
    }

    /// <summary>Field number for the "Billed" field.</summary>
    public const int BilledFieldNumber = 39;
    private bool billed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Billed {
      get { return billed_; }
      set {
        billed_ = value;
      }
    }

    /// <summary>Field number for the "Billdate" field.</summary>
    public const int BilldateFieldNumber = 40;
    private string billdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Billdate {
      get { return billdate_; }
      set {
        billdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Canceled" field.</summary>
    public const int CanceledFieldNumber = 41;
    private bool canceled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Canceled {
      get { return canceled_; }
      set {
        canceled_ = value;
      }
    }

    /// <summary>Field number for the "Candate" field.</summary>
    public const int CandateFieldNumber = 42;
    private string candate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Candate {
      get { return candate_; }
      set {
        candate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Numveh" field.</summary>
    public const int NumvehFieldNumber = 43;
    private int numveh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numveh {
      get { return numveh_; }
      set {
        numveh_ = value;
      }
    }

    /// <summary>Field number for the "Dropret" field.</summary>
    public const int DropretFieldNumber = 44;
    private bool dropret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dropret {
      get { return dropret_; }
      set {
        dropret_ = value;
      }
    }

    /// <summary>Field number for the "Tripcom" field.</summary>
    public const int TripcomFieldNumber = 45;
    private string tripcom_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tripcom {
      get { return tripcom_; }
      set {
        tripcom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Autoassign" field.</summary>
    public const int AutoassignFieldNumber = 46;
    private bool autoassign_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Autoassign {
      get { return autoassign_; }
      set {
        autoassign_ = value;
      }
    }

    /// <summary>Field number for the "Po" field.</summary>
    public const int PoFieldNumber = 47;
    private string po_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Po {
      get { return po_; }
      set {
        po_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tripcat" field.</summary>
    public const int TripcatFieldNumber = 48;
    private string tripcat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tripcat {
      get { return tripcat_; }
      set {
        tripcat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Inttripnum" field.</summary>
    public const int InttripnumFieldNumber = 49;
    private string inttripnum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Inttripnum {
      get { return inttripnum_; }
      set {
        inttripnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tripreqnum" field.</summary>
    public const int TripreqnumFieldNumber = 50;
    private int tripreqnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tripreqnum {
      get { return tripreqnum_; }
      set {
        tripreqnum_ = value;
      }
    }

    /// <summary>Field number for the "Amount1" field.</summary>
    public const int Amount1FieldNumber = 51;
    private float amount1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount1 {
      get { return amount1_; }
      set {
        amount1_ = value;
      }
    }

    /// <summary>Field number for the "Amount2" field.</summary>
    public const int Amount2FieldNumber = 52;
    private float amount2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount2 {
      get { return amount2_; }
      set {
        amount2_ = value;
      }
    }

    /// <summary>Field number for the "Amount3" field.</summary>
    public const int Amount3FieldNumber = 53;
    private float amount3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount3 {
      get { return amount3_; }
      set {
        amount3_ = value;
      }
    }

    /// <summary>Field number for the "Amount4" field.</summary>
    public const int Amount4FieldNumber = 54;
    private float amount4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount4 {
      get { return amount4_; }
      set {
        amount4_ = value;
      }
    }

    /// <summary>Field number for the "Amount5" field.</summary>
    public const int Amount5FieldNumber = 55;
    private float amount5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount5 {
      get { return amount5_; }
      set {
        amount5_ = value;
      }
    }

    /// <summary>Field number for the "Amounttxt1" field.</summary>
    public const int Amounttxt1FieldNumber = 56;
    private string amounttxt1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt1 {
      get { return amounttxt1_; }
      set {
        amounttxt1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Amounttxt2" field.</summary>
    public const int Amounttxt2FieldNumber = 57;
    private string amounttxt2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt2 {
      get { return amounttxt2_; }
      set {
        amounttxt2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Amounttxt3" field.</summary>
    public const int Amounttxt3FieldNumber = 58;
    private string amounttxt3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt3 {
      get { return amounttxt3_; }
      set {
        amounttxt3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Amounttxt4" field.</summary>
    public const int Amounttxt4FieldNumber = 59;
    private string amounttxt4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt4 {
      get { return amounttxt4_; }
      set {
        amounttxt4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Amounttxt5" field.</summary>
    public const int Amounttxt5FieldNumber = 60;
    private string amounttxt5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt5 {
      get { return amounttxt5_; }
      set {
        amounttxt5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Grade" field.</summary>
    public const int GradeFieldNumber = 61;
    private string grade_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Grade {
      get { return grade_; }
      set {
        grade_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Split" field.</summary>
    public const int SplitFieldNumber = 62;
    private bool split_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Split {
      get { return split_; }
      set {
        split_ = value;
      }
    }

    /// <summary>Field number for the "InvoiceFormat" field.</summary>
    public const int InvoiceFormatFieldNumber = 63;
    private string invoiceFormat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvoiceFormat {
      get { return invoiceFormat_; }
      set {
        invoiceFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InvoiceComment1" field.</summary>
    public const int InvoiceComment1FieldNumber = 64;
    private string invoiceComment1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvoiceComment1 {
      get { return invoiceComment1_; }
      set {
        invoiceComment1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Multidest" field.</summary>
    public const int MultidestFieldNumber = 65;
    private bool multidest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Multidest {
      get { return multidest_; }
      set {
        multidest_ = value;
      }
    }

    /// <summary>Field number for the "Shuttle" field.</summary>
    public const int ShuttleFieldNumber = 66;
    private bool shuttle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shuttle {
      get { return shuttle_; }
      set {
        shuttle_ = value;
      }
    }

    /// <summary>Field number for the "TicketFormat" field.</summary>
    public const int TicketFormatFieldNumber = 67;
    private string ticketFormat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketFormat {
      get { return ticketFormat_; }
      set {
        ticketFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Numchar" field.</summary>
    public const int NumcharFieldNumber = 68;
    private int numchar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numchar {
      get { return numchar_; }
      set {
        numchar_ = value;
      }
    }

    /// <summary>Field number for the "RequestorEmail" field.</summary>
    public const int RequestorEmailFieldNumber = 69;
    private string requestorEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestorEmail {
      get { return requestorEmail_; }
      set {
        requestorEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AdministratorEmail" field.</summary>
    public const int AdministratorEmailFieldNumber = 70;
    private string administratorEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdministratorEmail {
      get { return administratorEmail_; }
      set {
        administratorEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApproverEmail" field.</summary>
    public const int ApproverEmailFieldNumber = 71;
    private string approverEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApproverEmail {
      get { return approverEmail_; }
      set {
        approverEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DateEntered" field.</summary>
    public const int DateEnteredFieldNumber = 72;
    private string dateEntered_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateEntered {
      get { return dateEntered_; }
      set {
        dateEntered_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserEntered" field.</summary>
    public const int UserEnteredFieldNumber = 73;
    private string userEntered_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserEntered {
      get { return userEntered_; }
      set {
        userEntered_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DateLastchanged" field.</summary>
    public const int DateLastchangedFieldNumber = 74;
    private string dateLastchanged_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateLastchanged {
      get { return dateLastchanged_; }
      set {
        dateLastchanged_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserLastchanged" field.</summary>
    public const int UserLastchangedFieldNumber = 75;
    private string userLastchanged_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserLastchanged {
      get { return userLastchanged_; }
      set {
        userLastchanged_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "User1" field.</summary>
    public const int User1FieldNumber = 76;
    private string user1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User1 {
      get { return user1_; }
      set {
        user1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "User2" field.</summary>
    public const int User2FieldNumber = 77;
    private string user2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User2 {
      get { return user2_; }
      set {
        user2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Userdate1" field.</summary>
    public const int Userdate1FieldNumber = 78;
    private string userdate1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userdate1 {
      get { return userdate1_; }
      set {
        userdate1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Userdate2" field.</summary>
    public const int Userdate2FieldNumber = 79;
    private string userdate2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userdate2 {
      get { return userdate2_; }
      set {
        userdate2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SsmaTimeStamp" field.</summary>
    public const int SsmaTimeStampFieldNumber = 80;
    private string ssmaTimeStamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SsmaTimeStamp {
      get { return ssmaTimeStamp_; }
      set {
        ssmaTimeStamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TripReqRequired);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TripReqRequired other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TripNum != other.TripNum) return false;
      if (Prefix != other.Prefix) return false;
      if (Billrate != other.Billrate) return false;
      if (Reqdate != other.Reqdate) return false;
      if (Fund != other.Fund) return false;
      if (Customer != other.Customer) return false;
      if (Location != other.Location) return false;
      if (Billcust != other.Billcust) return false;
      if (Contact != other.Contact) return false;
      if (Destination != other.Destination) return false;
      if (Depdate != other.Depdate) return false;
      if (Deptime != other.Deptime) return false;
      if (Retdate != other.Retdate) return false;
      if (Rettime != other.Rettime) return false;
      if (Arrivetime != other.Arrivetime) return false;
      if (Leavetime != other.Leavetime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Estmile, other.Estmile)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Esttime, other.Esttime)) return false;
      if (Numstudents != other.Numstudents) return false;
      if (Numadults != other.Numadults) return false;
      if (Numhand != other.Numhand) return false;
      if (Purpose != other.Purpose) return false;
      if (Destspec != other.Destspec) return false;
      if (Outoftown != other.Outoftown) return false;
      if (Schedule != other.Schedule) return false;
      if (Schedule2 != other.Schedule2) return false;
      if (Schedule3 != other.Schedule3) return false;
      if (Schedule4 != other.Schedule4) return false;
      if (Schedule5 != other.Schedule5) return false;
      if (Calcnumdrivers != other.Calcnumdrivers) return false;
      if (Type != other.Type) return false;
      if (Numtype != other.Numtype) return false;
      if (Capacity != other.Capacity) return false;
      if (Addltype != other.Addltype) return false;
      if (Numaddl != other.Numaddl) return false;
      if (Bill != other.Bill) return false;
      if (Custspec != other.Custspec) return false;
      if (Assigned != other.Assigned) return false;
      if (Billed != other.Billed) return false;
      if (Billdate != other.Billdate) return false;
      if (Canceled != other.Canceled) return false;
      if (Candate != other.Candate) return false;
      if (Numveh != other.Numveh) return false;
      if (Dropret != other.Dropret) return false;
      if (Tripcom != other.Tripcom) return false;
      if (Autoassign != other.Autoassign) return false;
      if (Po != other.Po) return false;
      if (Tripcat != other.Tripcat) return false;
      if (Inttripnum != other.Inttripnum) return false;
      if (Tripreqnum != other.Tripreqnum) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount1, other.Amount1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount2, other.Amount2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount3, other.Amount3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount4, other.Amount4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount5, other.Amount5)) return false;
      if (Amounttxt1 != other.Amounttxt1) return false;
      if (Amounttxt2 != other.Amounttxt2) return false;
      if (Amounttxt3 != other.Amounttxt3) return false;
      if (Amounttxt4 != other.Amounttxt4) return false;
      if (Amounttxt5 != other.Amounttxt5) return false;
      if (Grade != other.Grade) return false;
      if (Split != other.Split) return false;
      if (InvoiceFormat != other.InvoiceFormat) return false;
      if (InvoiceComment1 != other.InvoiceComment1) return false;
      if (Multidest != other.Multidest) return false;
      if (Shuttle != other.Shuttle) return false;
      if (TicketFormat != other.TicketFormat) return false;
      if (Numchar != other.Numchar) return false;
      if (RequestorEmail != other.RequestorEmail) return false;
      if (AdministratorEmail != other.AdministratorEmail) return false;
      if (ApproverEmail != other.ApproverEmail) return false;
      if (DateEntered != other.DateEntered) return false;
      if (UserEntered != other.UserEntered) return false;
      if (DateLastchanged != other.DateLastchanged) return false;
      if (UserLastchanged != other.UserLastchanged) return false;
      if (User1 != other.User1) return false;
      if (User2 != other.User2) return false;
      if (Userdate1 != other.Userdate1) return false;
      if (Userdate2 != other.Userdate2) return false;
      if (SsmaTimeStamp != other.SsmaTimeStamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TripNum != 0) hash ^= TripNum.GetHashCode();
      if (Prefix.Length != 0) hash ^= Prefix.GetHashCode();
      if (billrate_ != null) hash ^= Billrate.GetHashCode();
      if (Reqdate.Length != 0) hash ^= Reqdate.GetHashCode();
      if (Fund.Length != 0) hash ^= Fund.GetHashCode();
      if (Customer.Length != 0) hash ^= Customer.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Billcust.Length != 0) hash ^= Billcust.GetHashCode();
      if (Contact.Length != 0) hash ^= Contact.GetHashCode();
      if (Destination != 0) hash ^= Destination.GetHashCode();
      if (Depdate.Length != 0) hash ^= Depdate.GetHashCode();
      if (Deptime.Length != 0) hash ^= Deptime.GetHashCode();
      if (Retdate.Length != 0) hash ^= Retdate.GetHashCode();
      if (Rettime.Length != 0) hash ^= Rettime.GetHashCode();
      if (Arrivetime.Length != 0) hash ^= Arrivetime.GetHashCode();
      if (Leavetime.Length != 0) hash ^= Leavetime.GetHashCode();
      if (estmile_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Estmile);
      if (esttime_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Esttime);
      if (Numstudents != 0) hash ^= Numstudents.GetHashCode();
      if (Numadults != 0) hash ^= Numadults.GetHashCode();
      if (numhand_ != null) hash ^= Numhand.GetHashCode();
      if (Purpose.Length != 0) hash ^= Purpose.GetHashCode();
      if (Destspec.Length != 0) hash ^= Destspec.GetHashCode();
      if (Outoftown != false) hash ^= Outoftown.GetHashCode();
      if (Schedule.Length != 0) hash ^= Schedule.GetHashCode();
      if (Schedule2.Length != 0) hash ^= Schedule2.GetHashCode();
      if (Schedule3.Length != 0) hash ^= Schedule3.GetHashCode();
      if (Schedule4.Length != 0) hash ^= Schedule4.GetHashCode();
      if (Schedule5.Length != 0) hash ^= Schedule5.GetHashCode();
      if (Calcnumdrivers != false) hash ^= Calcnumdrivers.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Numtype != 0) hash ^= Numtype.GetHashCode();
      if (Capacity.Length != 0) hash ^= Capacity.GetHashCode();
      if (Addltype.Length != 0) hash ^= Addltype.GetHashCode();
      if (Numaddl != 0) hash ^= Numaddl.GetHashCode();
      if (Bill != false) hash ^= Bill.GetHashCode();
      if (Custspec.Length != 0) hash ^= Custspec.GetHashCode();
      if (Assigned != false) hash ^= Assigned.GetHashCode();
      if (Billed != false) hash ^= Billed.GetHashCode();
      if (Billdate.Length != 0) hash ^= Billdate.GetHashCode();
      if (Canceled != false) hash ^= Canceled.GetHashCode();
      if (Candate.Length != 0) hash ^= Candate.GetHashCode();
      if (Numveh != 0) hash ^= Numveh.GetHashCode();
      if (Dropret != false) hash ^= Dropret.GetHashCode();
      if (Tripcom.Length != 0) hash ^= Tripcom.GetHashCode();
      if (Autoassign != false) hash ^= Autoassign.GetHashCode();
      if (Po.Length != 0) hash ^= Po.GetHashCode();
      if (Tripcat.Length != 0) hash ^= Tripcat.GetHashCode();
      if (Inttripnum.Length != 0) hash ^= Inttripnum.GetHashCode();
      if (Tripreqnum != 0) hash ^= Tripreqnum.GetHashCode();
      if (Amount1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount1);
      if (Amount2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount2);
      if (Amount3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount3);
      if (Amount4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount4);
      if (Amount5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount5);
      if (Amounttxt1.Length != 0) hash ^= Amounttxt1.GetHashCode();
      if (Amounttxt2.Length != 0) hash ^= Amounttxt2.GetHashCode();
      if (Amounttxt3.Length != 0) hash ^= Amounttxt3.GetHashCode();
      if (Amounttxt4.Length != 0) hash ^= Amounttxt4.GetHashCode();
      if (Amounttxt5.Length != 0) hash ^= Amounttxt5.GetHashCode();
      if (Grade.Length != 0) hash ^= Grade.GetHashCode();
      if (Split != false) hash ^= Split.GetHashCode();
      if (InvoiceFormat.Length != 0) hash ^= InvoiceFormat.GetHashCode();
      if (InvoiceComment1.Length != 0) hash ^= InvoiceComment1.GetHashCode();
      if (Multidest != false) hash ^= Multidest.GetHashCode();
      if (Shuttle != false) hash ^= Shuttle.GetHashCode();
      if (TicketFormat.Length != 0) hash ^= TicketFormat.GetHashCode();
      if (Numchar != 0) hash ^= Numchar.GetHashCode();
      if (RequestorEmail.Length != 0) hash ^= RequestorEmail.GetHashCode();
      if (AdministratorEmail.Length != 0) hash ^= AdministratorEmail.GetHashCode();
      if (ApproverEmail.Length != 0) hash ^= ApproverEmail.GetHashCode();
      if (DateEntered.Length != 0) hash ^= DateEntered.GetHashCode();
      if (UserEntered.Length != 0) hash ^= UserEntered.GetHashCode();
      if (DateLastchanged.Length != 0) hash ^= DateLastchanged.GetHashCode();
      if (UserLastchanged.Length != 0) hash ^= UserLastchanged.GetHashCode();
      if (User1.Length != 0) hash ^= User1.GetHashCode();
      if (User2.Length != 0) hash ^= User2.GetHashCode();
      if (Userdate1.Length != 0) hash ^= Userdate1.GetHashCode();
      if (Userdate2.Length != 0) hash ^= Userdate2.GetHashCode();
      if (SsmaTimeStamp.Length != 0) hash ^= SsmaTimeStamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TripNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TripNum);
      }
      if (Prefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Prefix);
      }
      if (billrate_ != null) {
        _single_billrate_codec.WriteTagAndValue(output, Billrate);
      }
      if (Reqdate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reqdate);
      }
      if (Fund.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Fund);
      }
      if (Customer.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Customer);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Location);
      }
      if (Billcust.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Billcust);
      }
      if (Contact.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Contact);
      }
      if (Destination != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Destination);
      }
      if (Depdate.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Depdate);
      }
      if (Deptime.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Deptime);
      }
      if (Retdate.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Retdate);
      }
      if (Rettime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Rettime);
      }
      if (Arrivetime.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Arrivetime);
      }
      if (Leavetime.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Leavetime);
      }
      if (estmile_ != null) {
        _single_estmile_codec.WriteTagAndValue(output, Estmile);
      }
      if (esttime_ != null) {
        _single_esttime_codec.WriteTagAndValue(output, Esttime);
      }
      if (Numstudents != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Numstudents);
      }
      if (Numadults != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Numadults);
      }
      if (numhand_ != null) {
        _single_numhand_codec.WriteTagAndValue(output, Numhand);
      }
      if (Purpose.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Purpose);
      }
      if (Destspec.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Destspec);
      }
      if (Outoftown != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Outoftown);
      }
      if (Schedule.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Schedule);
      }
      if (Schedule2.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Schedule2);
      }
      if (Schedule3.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Schedule3);
      }
      if (Schedule4.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Schedule4);
      }
      if (Schedule5.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Schedule5);
      }
      if (Calcnumdrivers != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Calcnumdrivers);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Type);
      }
      if (Numtype != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Numtype);
      }
      if (Capacity.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Capacity);
      }
      if (Addltype.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Addltype);
      }
      if (Numaddl != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Numaddl);
      }
      if (Bill != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Bill);
      }
      if (Custspec.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(Custspec);
      }
      if (Assigned != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(Assigned);
      }
      if (Billed != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(Billed);
      }
      if (Billdate.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Billdate);
      }
      if (Canceled != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(Canceled);
      }
      if (Candate.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(Candate);
      }
      if (Numveh != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(Numveh);
      }
      if (Dropret != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(Dropret);
      }
      if (Tripcom.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(Tripcom);
      }
      if (Autoassign != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(Autoassign);
      }
      if (Po.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(Po);
      }
      if (Tripcat.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Tripcat);
      }
      if (Inttripnum.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Inttripnum);
      }
      if (Tripreqnum != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(Tripreqnum);
      }
      if (Amount1 != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(Amount1);
      }
      if (Amount2 != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(Amount2);
      }
      if (Amount3 != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(Amount3);
      }
      if (Amount4 != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(Amount4);
      }
      if (Amount5 != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(Amount5);
      }
      if (Amounttxt1.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Amounttxt1);
      }
      if (Amounttxt2.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(Amounttxt2);
      }
      if (Amounttxt3.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Amounttxt3);
      }
      if (Amounttxt4.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(Amounttxt4);
      }
      if (Amounttxt5.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(Amounttxt5);
      }
      if (Grade.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(Grade);
      }
      if (Split != false) {
        output.WriteRawTag(240, 3);
        output.WriteBool(Split);
      }
      if (InvoiceFormat.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(InvoiceFormat);
      }
      if (InvoiceComment1.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(InvoiceComment1);
      }
      if (Multidest != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(Multidest);
      }
      if (Shuttle != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(Shuttle);
      }
      if (TicketFormat.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(TicketFormat);
      }
      if (Numchar != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(Numchar);
      }
      if (RequestorEmail.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteString(RequestorEmail);
      }
      if (AdministratorEmail.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(AdministratorEmail);
      }
      if (ApproverEmail.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteString(ApproverEmail);
      }
      if (DateEntered.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(DateEntered);
      }
      if (UserEntered.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(UserEntered);
      }
      if (DateLastchanged.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteString(DateLastchanged);
      }
      if (UserLastchanged.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(UserLastchanged);
      }
      if (User1.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(User1);
      }
      if (User2.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(User2);
      }
      if (Userdate1.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(Userdate1);
      }
      if (Userdate2.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(Userdate2);
      }
      if (SsmaTimeStamp.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(SsmaTimeStamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TripNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TripNum);
      }
      if (Prefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Prefix);
      }
      if (billrate_ != null) {
        _single_billrate_codec.WriteTagAndValue(ref output, Billrate);
      }
      if (Reqdate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reqdate);
      }
      if (Fund.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Fund);
      }
      if (Customer.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Customer);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Location);
      }
      if (Billcust.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Billcust);
      }
      if (Contact.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Contact);
      }
      if (Destination != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Destination);
      }
      if (Depdate.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Depdate);
      }
      if (Deptime.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Deptime);
      }
      if (Retdate.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Retdate);
      }
      if (Rettime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Rettime);
      }
      if (Arrivetime.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Arrivetime);
      }
      if (Leavetime.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Leavetime);
      }
      if (estmile_ != null) {
        _single_estmile_codec.WriteTagAndValue(ref output, Estmile);
      }
      if (esttime_ != null) {
        _single_esttime_codec.WriteTagAndValue(ref output, Esttime);
      }
      if (Numstudents != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Numstudents);
      }
      if (Numadults != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Numadults);
      }
      if (numhand_ != null) {
        _single_numhand_codec.WriteTagAndValue(ref output, Numhand);
      }
      if (Purpose.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Purpose);
      }
      if (Destspec.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Destspec);
      }
      if (Outoftown != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Outoftown);
      }
      if (Schedule.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Schedule);
      }
      if (Schedule2.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Schedule2);
      }
      if (Schedule3.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Schedule3);
      }
      if (Schedule4.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Schedule4);
      }
      if (Schedule5.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Schedule5);
      }
      if (Calcnumdrivers != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Calcnumdrivers);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Type);
      }
      if (Numtype != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Numtype);
      }
      if (Capacity.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Capacity);
      }
      if (Addltype.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Addltype);
      }
      if (Numaddl != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Numaddl);
      }
      if (Bill != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Bill);
      }
      if (Custspec.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(Custspec);
      }
      if (Assigned != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(Assigned);
      }
      if (Billed != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(Billed);
      }
      if (Billdate.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Billdate);
      }
      if (Canceled != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(Canceled);
      }
      if (Candate.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(Candate);
      }
      if (Numveh != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(Numveh);
      }
      if (Dropret != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(Dropret);
      }
      if (Tripcom.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(Tripcom);
      }
      if (Autoassign != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(Autoassign);
      }
      if (Po.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(Po);
      }
      if (Tripcat.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Tripcat);
      }
      if (Inttripnum.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Inttripnum);
      }
      if (Tripreqnum != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(Tripreqnum);
      }
      if (Amount1 != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(Amount1);
      }
      if (Amount2 != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(Amount2);
      }
      if (Amount3 != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(Amount3);
      }
      if (Amount4 != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(Amount4);
      }
      if (Amount5 != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(Amount5);
      }
      if (Amounttxt1.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Amounttxt1);
      }
      if (Amounttxt2.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(Amounttxt2);
      }
      if (Amounttxt3.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Amounttxt3);
      }
      if (Amounttxt4.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(Amounttxt4);
      }
      if (Amounttxt5.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(Amounttxt5);
      }
      if (Grade.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(Grade);
      }
      if (Split != false) {
        output.WriteRawTag(240, 3);
        output.WriteBool(Split);
      }
      if (InvoiceFormat.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(InvoiceFormat);
      }
      if (InvoiceComment1.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(InvoiceComment1);
      }
      if (Multidest != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(Multidest);
      }
      if (Shuttle != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(Shuttle);
      }
      if (TicketFormat.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(TicketFormat);
      }
      if (Numchar != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(Numchar);
      }
      if (RequestorEmail.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteString(RequestorEmail);
      }
      if (AdministratorEmail.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(AdministratorEmail);
      }
      if (ApproverEmail.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteString(ApproverEmail);
      }
      if (DateEntered.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(DateEntered);
      }
      if (UserEntered.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(UserEntered);
      }
      if (DateLastchanged.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteString(DateLastchanged);
      }
      if (UserLastchanged.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(UserLastchanged);
      }
      if (User1.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(User1);
      }
      if (User2.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(User2);
      }
      if (Userdate1.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(Userdate1);
      }
      if (Userdate2.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(Userdate2);
      }
      if (SsmaTimeStamp.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(SsmaTimeStamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TripNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TripNum);
      }
      if (Prefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (billrate_ != null) {
        size += _single_billrate_codec.CalculateSizeWithTag(Billrate);
      }
      if (Reqdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reqdate);
      }
      if (Fund.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fund);
      }
      if (Customer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Customer);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Billcust.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Billcust);
      }
      if (Contact.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contact);
      }
      if (Destination != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Destination);
      }
      if (Depdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Depdate);
      }
      if (Deptime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deptime);
      }
      if (Retdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Retdate);
      }
      if (Rettime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rettime);
      }
      if (Arrivetime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arrivetime);
      }
      if (Leavetime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Leavetime);
      }
      if (estmile_ != null) {
        size += _single_estmile_codec.CalculateSizeWithTag(Estmile);
      }
      if (esttime_ != null) {
        size += _single_esttime_codec.CalculateSizeWithTag(Esttime);
      }
      if (Numstudents != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numstudents);
      }
      if (Numadults != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numadults);
      }
      if (numhand_ != null) {
        size += _single_numhand_codec.CalculateSizeWithTag(Numhand);
      }
      if (Purpose.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Purpose);
      }
      if (Destspec.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Destspec);
      }
      if (Outoftown != false) {
        size += 2 + 1;
      }
      if (Schedule.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule);
      }
      if (Schedule2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule2);
      }
      if (Schedule3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule3);
      }
      if (Schedule4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule4);
      }
      if (Schedule5.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule5);
      }
      if (Calcnumdrivers != false) {
        size += 2 + 1;
      }
      if (Type.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Numtype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numtype);
      }
      if (Capacity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Capacity);
      }
      if (Addltype.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Addltype);
      }
      if (Numaddl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numaddl);
      }
      if (Bill != false) {
        size += 2 + 1;
      }
      if (Custspec.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Custspec);
      }
      if (Assigned != false) {
        size += 2 + 1;
      }
      if (Billed != false) {
        size += 2 + 1;
      }
      if (Billdate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Billdate);
      }
      if (Canceled != false) {
        size += 2 + 1;
      }
      if (Candate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Candate);
      }
      if (Numveh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numveh);
      }
      if (Dropret != false) {
        size += 2 + 1;
      }
      if (Tripcom.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tripcom);
      }
      if (Autoassign != false) {
        size += 2 + 1;
      }
      if (Po.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Po);
      }
      if (Tripcat.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tripcat);
      }
      if (Inttripnum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Inttripnum);
      }
      if (Tripreqnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tripreqnum);
      }
      if (Amount1 != 0F) {
        size += 2 + 4;
      }
      if (Amount2 != 0F) {
        size += 2 + 4;
      }
      if (Amount3 != 0F) {
        size += 2 + 4;
      }
      if (Amount4 != 0F) {
        size += 2 + 4;
      }
      if (Amount5 != 0F) {
        size += 2 + 4;
      }
      if (Amounttxt1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt1);
      }
      if (Amounttxt2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt2);
      }
      if (Amounttxt3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt3);
      }
      if (Amounttxt4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt4);
      }
      if (Amounttxt5.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt5);
      }
      if (Grade.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Grade);
      }
      if (Split != false) {
        size += 2 + 1;
      }
      if (InvoiceFormat.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InvoiceFormat);
      }
      if (InvoiceComment1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InvoiceComment1);
      }
      if (Multidest != false) {
        size += 2 + 1;
      }
      if (Shuttle != false) {
        size += 2 + 1;
      }
      if (TicketFormat.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TicketFormat);
      }
      if (Numchar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numchar);
      }
      if (RequestorEmail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RequestorEmail);
      }
      if (AdministratorEmail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdministratorEmail);
      }
      if (ApproverEmail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ApproverEmail);
      }
      if (DateEntered.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DateEntered);
      }
      if (UserEntered.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserEntered);
      }
      if (DateLastchanged.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DateLastchanged);
      }
      if (UserLastchanged.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserLastchanged);
      }
      if (User1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(User1);
      }
      if (User2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(User2);
      }
      if (Userdate1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Userdate1);
      }
      if (Userdate2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Userdate2);
      }
      if (SsmaTimeStamp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SsmaTimeStamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TripReqRequired other) {
      if (other == null) {
        return;
      }
      if (other.TripNum != 0) {
        TripNum = other.TripNum;
      }
      if (other.Prefix.Length != 0) {
        Prefix = other.Prefix;
      }
      if (other.billrate_ != null) {
        if (billrate_ == null || other.Billrate != 0) {
          Billrate = other.Billrate;
        }
      }
      if (other.Reqdate.Length != 0) {
        Reqdate = other.Reqdate;
      }
      if (other.Fund.Length != 0) {
        Fund = other.Fund;
      }
      if (other.Customer.Length != 0) {
        Customer = other.Customer;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Billcust.Length != 0) {
        Billcust = other.Billcust;
      }
      if (other.Contact.Length != 0) {
        Contact = other.Contact;
      }
      if (other.Destination != 0) {
        Destination = other.Destination;
      }
      if (other.Depdate.Length != 0) {
        Depdate = other.Depdate;
      }
      if (other.Deptime.Length != 0) {
        Deptime = other.Deptime;
      }
      if (other.Retdate.Length != 0) {
        Retdate = other.Retdate;
      }
      if (other.Rettime.Length != 0) {
        Rettime = other.Rettime;
      }
      if (other.Arrivetime.Length != 0) {
        Arrivetime = other.Arrivetime;
      }
      if (other.Leavetime.Length != 0) {
        Leavetime = other.Leavetime;
      }
      if (other.estmile_ != null) {
        if (estmile_ == null || other.Estmile != 0F) {
          Estmile = other.Estmile;
        }
      }
      if (other.esttime_ != null) {
        if (esttime_ == null || other.Esttime != 0F) {
          Esttime = other.Esttime;
        }
      }
      if (other.Numstudents != 0) {
        Numstudents = other.Numstudents;
      }
      if (other.Numadults != 0) {
        Numadults = other.Numadults;
      }
      if (other.numhand_ != null) {
        if (numhand_ == null || other.Numhand != 0) {
          Numhand = other.Numhand;
        }
      }
      if (other.Purpose.Length != 0) {
        Purpose = other.Purpose;
      }
      if (other.Destspec.Length != 0) {
        Destspec = other.Destspec;
      }
      if (other.Outoftown != false) {
        Outoftown = other.Outoftown;
      }
      if (other.Schedule.Length != 0) {
        Schedule = other.Schedule;
      }
      if (other.Schedule2.Length != 0) {
        Schedule2 = other.Schedule2;
      }
      if (other.Schedule3.Length != 0) {
        Schedule3 = other.Schedule3;
      }
      if (other.Schedule4.Length != 0) {
        Schedule4 = other.Schedule4;
      }
      if (other.Schedule5.Length != 0) {
        Schedule5 = other.Schedule5;
      }
      if (other.Calcnumdrivers != false) {
        Calcnumdrivers = other.Calcnumdrivers;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Numtype != 0) {
        Numtype = other.Numtype;
      }
      if (other.Capacity.Length != 0) {
        Capacity = other.Capacity;
      }
      if (other.Addltype.Length != 0) {
        Addltype = other.Addltype;
      }
      if (other.Numaddl != 0) {
        Numaddl = other.Numaddl;
      }
      if (other.Bill != false) {
        Bill = other.Bill;
      }
      if (other.Custspec.Length != 0) {
        Custspec = other.Custspec;
      }
      if (other.Assigned != false) {
        Assigned = other.Assigned;
      }
      if (other.Billed != false) {
        Billed = other.Billed;
      }
      if (other.Billdate.Length != 0) {
        Billdate = other.Billdate;
      }
      if (other.Canceled != false) {
        Canceled = other.Canceled;
      }
      if (other.Candate.Length != 0) {
        Candate = other.Candate;
      }
      if (other.Numveh != 0) {
        Numveh = other.Numveh;
      }
      if (other.Dropret != false) {
        Dropret = other.Dropret;
      }
      if (other.Tripcom.Length != 0) {
        Tripcom = other.Tripcom;
      }
      if (other.Autoassign != false) {
        Autoassign = other.Autoassign;
      }
      if (other.Po.Length != 0) {
        Po = other.Po;
      }
      if (other.Tripcat.Length != 0) {
        Tripcat = other.Tripcat;
      }
      if (other.Inttripnum.Length != 0) {
        Inttripnum = other.Inttripnum;
      }
      if (other.Tripreqnum != 0) {
        Tripreqnum = other.Tripreqnum;
      }
      if (other.Amount1 != 0F) {
        Amount1 = other.Amount1;
      }
      if (other.Amount2 != 0F) {
        Amount2 = other.Amount2;
      }
      if (other.Amount3 != 0F) {
        Amount3 = other.Amount3;
      }
      if (other.Amount4 != 0F) {
        Amount4 = other.Amount4;
      }
      if (other.Amount5 != 0F) {
        Amount5 = other.Amount5;
      }
      if (other.Amounttxt1.Length != 0) {
        Amounttxt1 = other.Amounttxt1;
      }
      if (other.Amounttxt2.Length != 0) {
        Amounttxt2 = other.Amounttxt2;
      }
      if (other.Amounttxt3.Length != 0) {
        Amounttxt3 = other.Amounttxt3;
      }
      if (other.Amounttxt4.Length != 0) {
        Amounttxt4 = other.Amounttxt4;
      }
      if (other.Amounttxt5.Length != 0) {
        Amounttxt5 = other.Amounttxt5;
      }
      if (other.Grade.Length != 0) {
        Grade = other.Grade;
      }
      if (other.Split != false) {
        Split = other.Split;
      }
      if (other.InvoiceFormat.Length != 0) {
        InvoiceFormat = other.InvoiceFormat;
      }
      if (other.InvoiceComment1.Length != 0) {
        InvoiceComment1 = other.InvoiceComment1;
      }
      if (other.Multidest != false) {
        Multidest = other.Multidest;
      }
      if (other.Shuttle != false) {
        Shuttle = other.Shuttle;
      }
      if (other.TicketFormat.Length != 0) {
        TicketFormat = other.TicketFormat;
      }
      if (other.Numchar != 0) {
        Numchar = other.Numchar;
      }
      if (other.RequestorEmail.Length != 0) {
        RequestorEmail = other.RequestorEmail;
      }
      if (other.AdministratorEmail.Length != 0) {
        AdministratorEmail = other.AdministratorEmail;
      }
      if (other.ApproverEmail.Length != 0) {
        ApproverEmail = other.ApproverEmail;
      }
      if (other.DateEntered.Length != 0) {
        DateEntered = other.DateEntered;
      }
      if (other.UserEntered.Length != 0) {
        UserEntered = other.UserEntered;
      }
      if (other.DateLastchanged.Length != 0) {
        DateLastchanged = other.DateLastchanged;
      }
      if (other.UserLastchanged.Length != 0) {
        UserLastchanged = other.UserLastchanged;
      }
      if (other.User1.Length != 0) {
        User1 = other.User1;
      }
      if (other.User2.Length != 0) {
        User2 = other.User2;
      }
      if (other.Userdate1.Length != 0) {
        Userdate1 = other.Userdate1;
      }
      if (other.Userdate2.Length != 0) {
        Userdate2 = other.Userdate2;
      }
      if (other.SsmaTimeStamp.Length != 0) {
        SsmaTimeStamp = other.SsmaTimeStamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TripNum = input.ReadInt32();
            break;
          }
          case 18: {
            Prefix = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_billrate_codec.Read(input);
            if (billrate_ == null || value != 0) {
              Billrate = value;
            }
            break;
          }
          case 34: {
            Reqdate = input.ReadString();
            break;
          }
          case 42: {
            Fund = input.ReadString();
            break;
          }
          case 50: {
            Customer = input.ReadString();
            break;
          }
          case 58: {
            Location = input.ReadString();
            break;
          }
          case 66: {
            Billcust = input.ReadString();
            break;
          }
          case 74: {
            Contact = input.ReadString();
            break;
          }
          case 80: {
            Destination = input.ReadInt32();
            break;
          }
          case 90: {
            Depdate = input.ReadString();
            break;
          }
          case 98: {
            Deptime = input.ReadString();
            break;
          }
          case 106: {
            Retdate = input.ReadString();
            break;
          }
          case 114: {
            Rettime = input.ReadString();
            break;
          }
          case 122: {
            Arrivetime = input.ReadString();
            break;
          }
          case 130: {
            Leavetime = input.ReadString();
            break;
          }
          case 138: {
            float? value = _single_estmile_codec.Read(input);
            if (estmile_ == null || value != 0F) {
              Estmile = value;
            }
            break;
          }
          case 146: {
            float? value = _single_esttime_codec.Read(input);
            if (esttime_ == null || value != 0F) {
              Esttime = value;
            }
            break;
          }
          case 152: {
            Numstudents = input.ReadInt32();
            break;
          }
          case 160: {
            Numadults = input.ReadInt32();
            break;
          }
          case 170: {
            int? value = _single_numhand_codec.Read(input);
            if (numhand_ == null || value != 0) {
              Numhand = value;
            }
            break;
          }
          case 178: {
            Purpose = input.ReadString();
            break;
          }
          case 186: {
            Destspec = input.ReadString();
            break;
          }
          case 192: {
            Outoftown = input.ReadBool();
            break;
          }
          case 202: {
            Schedule = input.ReadString();
            break;
          }
          case 210: {
            Schedule2 = input.ReadString();
            break;
          }
          case 218: {
            Schedule3 = input.ReadString();
            break;
          }
          case 226: {
            Schedule4 = input.ReadString();
            break;
          }
          case 234: {
            Schedule5 = input.ReadString();
            break;
          }
          case 240: {
            Calcnumdrivers = input.ReadBool();
            break;
          }
          case 250: {
            Type = input.ReadString();
            break;
          }
          case 256: {
            Numtype = input.ReadInt32();
            break;
          }
          case 266: {
            Capacity = input.ReadString();
            break;
          }
          case 274: {
            Addltype = input.ReadString();
            break;
          }
          case 280: {
            Numaddl = input.ReadInt32();
            break;
          }
          case 288: {
            Bill = input.ReadBool();
            break;
          }
          case 298: {
            Custspec = input.ReadString();
            break;
          }
          case 304: {
            Assigned = input.ReadBool();
            break;
          }
          case 312: {
            Billed = input.ReadBool();
            break;
          }
          case 322: {
            Billdate = input.ReadString();
            break;
          }
          case 328: {
            Canceled = input.ReadBool();
            break;
          }
          case 338: {
            Candate = input.ReadString();
            break;
          }
          case 344: {
            Numveh = input.ReadInt32();
            break;
          }
          case 352: {
            Dropret = input.ReadBool();
            break;
          }
          case 362: {
            Tripcom = input.ReadString();
            break;
          }
          case 368: {
            Autoassign = input.ReadBool();
            break;
          }
          case 378: {
            Po = input.ReadString();
            break;
          }
          case 386: {
            Tripcat = input.ReadString();
            break;
          }
          case 394: {
            Inttripnum = input.ReadString();
            break;
          }
          case 400: {
            Tripreqnum = input.ReadInt32();
            break;
          }
          case 413: {
            Amount1 = input.ReadFloat();
            break;
          }
          case 421: {
            Amount2 = input.ReadFloat();
            break;
          }
          case 429: {
            Amount3 = input.ReadFloat();
            break;
          }
          case 437: {
            Amount4 = input.ReadFloat();
            break;
          }
          case 445: {
            Amount5 = input.ReadFloat();
            break;
          }
          case 450: {
            Amounttxt1 = input.ReadString();
            break;
          }
          case 458: {
            Amounttxt2 = input.ReadString();
            break;
          }
          case 466: {
            Amounttxt3 = input.ReadString();
            break;
          }
          case 474: {
            Amounttxt4 = input.ReadString();
            break;
          }
          case 482: {
            Amounttxt5 = input.ReadString();
            break;
          }
          case 490: {
            Grade = input.ReadString();
            break;
          }
          case 496: {
            Split = input.ReadBool();
            break;
          }
          case 506: {
            InvoiceFormat = input.ReadString();
            break;
          }
          case 514: {
            InvoiceComment1 = input.ReadString();
            break;
          }
          case 520: {
            Multidest = input.ReadBool();
            break;
          }
          case 528: {
            Shuttle = input.ReadBool();
            break;
          }
          case 538: {
            TicketFormat = input.ReadString();
            break;
          }
          case 544: {
            Numchar = input.ReadInt32();
            break;
          }
          case 554: {
            RequestorEmail = input.ReadString();
            break;
          }
          case 562: {
            AdministratorEmail = input.ReadString();
            break;
          }
          case 570: {
            ApproverEmail = input.ReadString();
            break;
          }
          case 578: {
            DateEntered = input.ReadString();
            break;
          }
          case 586: {
            UserEntered = input.ReadString();
            break;
          }
          case 594: {
            DateLastchanged = input.ReadString();
            break;
          }
          case 602: {
            UserLastchanged = input.ReadString();
            break;
          }
          case 610: {
            User1 = input.ReadString();
            break;
          }
          case 618: {
            User2 = input.ReadString();
            break;
          }
          case 626: {
            Userdate1 = input.ReadString();
            break;
          }
          case 634: {
            Userdate2 = input.ReadString();
            break;
          }
          case 642: {
            SsmaTimeStamp = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TripNum = input.ReadInt32();
            break;
          }
          case 18: {
            Prefix = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_billrate_codec.Read(ref input);
            if (billrate_ == null || value != 0) {
              Billrate = value;
            }
            break;
          }
          case 34: {
            Reqdate = input.ReadString();
            break;
          }
          case 42: {
            Fund = input.ReadString();
            break;
          }
          case 50: {
            Customer = input.ReadString();
            break;
          }
          case 58: {
            Location = input.ReadString();
            break;
          }
          case 66: {
            Billcust = input.ReadString();
            break;
          }
          case 74: {
            Contact = input.ReadString();
            break;
          }
          case 80: {
            Destination = input.ReadInt32();
            break;
          }
          case 90: {
            Depdate = input.ReadString();
            break;
          }
          case 98: {
            Deptime = input.ReadString();
            break;
          }
          case 106: {
            Retdate = input.ReadString();
            break;
          }
          case 114: {
            Rettime = input.ReadString();
            break;
          }
          case 122: {
            Arrivetime = input.ReadString();
            break;
          }
          case 130: {
            Leavetime = input.ReadString();
            break;
          }
          case 138: {
            float? value = _single_estmile_codec.Read(ref input);
            if (estmile_ == null || value != 0F) {
              Estmile = value;
            }
            break;
          }
          case 146: {
            float? value = _single_esttime_codec.Read(ref input);
            if (esttime_ == null || value != 0F) {
              Esttime = value;
            }
            break;
          }
          case 152: {
            Numstudents = input.ReadInt32();
            break;
          }
          case 160: {
            Numadults = input.ReadInt32();
            break;
          }
          case 170: {
            int? value = _single_numhand_codec.Read(ref input);
            if (numhand_ == null || value != 0) {
              Numhand = value;
            }
            break;
          }
          case 178: {
            Purpose = input.ReadString();
            break;
          }
          case 186: {
            Destspec = input.ReadString();
            break;
          }
          case 192: {
            Outoftown = input.ReadBool();
            break;
          }
          case 202: {
            Schedule = input.ReadString();
            break;
          }
          case 210: {
            Schedule2 = input.ReadString();
            break;
          }
          case 218: {
            Schedule3 = input.ReadString();
            break;
          }
          case 226: {
            Schedule4 = input.ReadString();
            break;
          }
          case 234: {
            Schedule5 = input.ReadString();
            break;
          }
          case 240: {
            Calcnumdrivers = input.ReadBool();
            break;
          }
          case 250: {
            Type = input.ReadString();
            break;
          }
          case 256: {
            Numtype = input.ReadInt32();
            break;
          }
          case 266: {
            Capacity = input.ReadString();
            break;
          }
          case 274: {
            Addltype = input.ReadString();
            break;
          }
          case 280: {
            Numaddl = input.ReadInt32();
            break;
          }
          case 288: {
            Bill = input.ReadBool();
            break;
          }
          case 298: {
            Custspec = input.ReadString();
            break;
          }
          case 304: {
            Assigned = input.ReadBool();
            break;
          }
          case 312: {
            Billed = input.ReadBool();
            break;
          }
          case 322: {
            Billdate = input.ReadString();
            break;
          }
          case 328: {
            Canceled = input.ReadBool();
            break;
          }
          case 338: {
            Candate = input.ReadString();
            break;
          }
          case 344: {
            Numveh = input.ReadInt32();
            break;
          }
          case 352: {
            Dropret = input.ReadBool();
            break;
          }
          case 362: {
            Tripcom = input.ReadString();
            break;
          }
          case 368: {
            Autoassign = input.ReadBool();
            break;
          }
          case 378: {
            Po = input.ReadString();
            break;
          }
          case 386: {
            Tripcat = input.ReadString();
            break;
          }
          case 394: {
            Inttripnum = input.ReadString();
            break;
          }
          case 400: {
            Tripreqnum = input.ReadInt32();
            break;
          }
          case 413: {
            Amount1 = input.ReadFloat();
            break;
          }
          case 421: {
            Amount2 = input.ReadFloat();
            break;
          }
          case 429: {
            Amount3 = input.ReadFloat();
            break;
          }
          case 437: {
            Amount4 = input.ReadFloat();
            break;
          }
          case 445: {
            Amount5 = input.ReadFloat();
            break;
          }
          case 450: {
            Amounttxt1 = input.ReadString();
            break;
          }
          case 458: {
            Amounttxt2 = input.ReadString();
            break;
          }
          case 466: {
            Amounttxt3 = input.ReadString();
            break;
          }
          case 474: {
            Amounttxt4 = input.ReadString();
            break;
          }
          case 482: {
            Amounttxt5 = input.ReadString();
            break;
          }
          case 490: {
            Grade = input.ReadString();
            break;
          }
          case 496: {
            Split = input.ReadBool();
            break;
          }
          case 506: {
            InvoiceFormat = input.ReadString();
            break;
          }
          case 514: {
            InvoiceComment1 = input.ReadString();
            break;
          }
          case 520: {
            Multidest = input.ReadBool();
            break;
          }
          case 528: {
            Shuttle = input.ReadBool();
            break;
          }
          case 538: {
            TicketFormat = input.ReadString();
            break;
          }
          case 544: {
            Numchar = input.ReadInt32();
            break;
          }
          case 554: {
            RequestorEmail = input.ReadString();
            break;
          }
          case 562: {
            AdministratorEmail = input.ReadString();
            break;
          }
          case 570: {
            ApproverEmail = input.ReadString();
            break;
          }
          case 578: {
            DateEntered = input.ReadString();
            break;
          }
          case 586: {
            UserEntered = input.ReadString();
            break;
          }
          case 594: {
            DateLastchanged = input.ReadString();
            break;
          }
          case 602: {
            UserLastchanged = input.ReadString();
            break;
          }
          case 610: {
            User1 = input.ReadString();
            break;
          }
          case 618: {
            User2 = input.ReadString();
            break;
          }
          case 626: {
            Userdate1 = input.ReadString();
            break;
          }
          case 634: {
            Userdate2 = input.ReadString();
            break;
          }
          case 642: {
            SsmaTimeStamp = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetTripsReqRequiredResponse : pb::IMessage<GetTripsReqRequiredResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetTripsReqRequiredResponse> _parser = new pb::MessageParser<GetTripsReqRequiredResponse>(() => new GetTripsReqRequiredResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTripsReqRequiredResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DemoProject.Web.Protobufs.V1.TripreqrequiredReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTripsReqRequiredResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTripsReqRequiredResponse(GetTripsReqRequiredResponse other) : this() {
      tripNum_ = other.tripNum_;
      prefix_ = other.prefix_;
      Billrate = other.Billrate;
      reqdate_ = other.reqdate_;
      fund_ = other.fund_;
      customer_ = other.customer_;
      location_ = other.location_;
      billcust_ = other.billcust_;
      contact_ = other.contact_;
      destination_ = other.destination_;
      depdate_ = other.depdate_;
      deptime_ = other.deptime_;
      retdate_ = other.retdate_;
      rettime_ = other.rettime_;
      arrivetime_ = other.arrivetime_;
      leavetime_ = other.leavetime_;
      Estmile = other.Estmile;
      Esttime = other.Esttime;
      numstudents_ = other.numstudents_;
      numadults_ = other.numadults_;
      Numhand = other.Numhand;
      purpose_ = other.purpose_;
      destspec_ = other.destspec_;
      outoftown_ = other.outoftown_;
      schedule_ = other.schedule_;
      schedule2_ = other.schedule2_;
      schedule3_ = other.schedule3_;
      schedule4_ = other.schedule4_;
      schedule5_ = other.schedule5_;
      calcnumdrivers_ = other.calcnumdrivers_;
      type_ = other.type_;
      numtype_ = other.numtype_;
      capacity_ = other.capacity_;
      addltype_ = other.addltype_;
      numaddl_ = other.numaddl_;
      bill_ = other.bill_;
      custspec_ = other.custspec_;
      assigned_ = other.assigned_;
      billed_ = other.billed_;
      billdate_ = other.billdate_;
      canceled_ = other.canceled_;
      candate_ = other.candate_;
      numveh_ = other.numveh_;
      dropret_ = other.dropret_;
      tripcom_ = other.tripcom_;
      autoassign_ = other.autoassign_;
      po_ = other.po_;
      tripcat_ = other.tripcat_;
      inttripnum_ = other.inttripnum_;
      tripreqnum_ = other.tripreqnum_;
      amount1_ = other.amount1_;
      amount2_ = other.amount2_;
      amount3_ = other.amount3_;
      amount4_ = other.amount4_;
      amount5_ = other.amount5_;
      amounttxt1_ = other.amounttxt1_;
      amounttxt2_ = other.amounttxt2_;
      amounttxt3_ = other.amounttxt3_;
      amounttxt4_ = other.amounttxt4_;
      amounttxt5_ = other.amounttxt5_;
      grade_ = other.grade_;
      split_ = other.split_;
      invoiceFormat_ = other.invoiceFormat_;
      invoiceComment1_ = other.invoiceComment1_;
      multidest_ = other.multidest_;
      shuttle_ = other.shuttle_;
      ticketFormat_ = other.ticketFormat_;
      numchar_ = other.numchar_;
      requestorEmail_ = other.requestorEmail_;
      administratorEmail_ = other.administratorEmail_;
      approverEmail_ = other.approverEmail_;
      dateEntered_ = other.dateEntered_;
      userEntered_ = other.userEntered_;
      dateLastchanged_ = other.dateLastchanged_;
      userLastchanged_ = other.userLastchanged_;
      user1_ = other.user1_;
      user2_ = other.user2_;
      userdate1_ = other.userdate1_;
      userdate2_ = other.userdate2_;
      ssmaTimeStamp_ = other.ssmaTimeStamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTripsReqRequiredResponse Clone() {
      return new GetTripsReqRequiredResponse(this);
    }

    /// <summary>Field number for the "TripNum" field.</summary>
    public const int TripNumFieldNumber = 1;
    private int tripNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TripNum {
      get { return tripNum_; }
      set {
        tripNum_ = value;
      }
    }

    /// <summary>Field number for the "Prefix" field.</summary>
    public const int PrefixFieldNumber = 2;
    private string prefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prefix {
      get { return prefix_; }
      set {
        prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Billrate" field.</summary>
    public const int BillrateFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_billrate_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? billrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Billrate {
      get { return billrate_; }
      set {
        billrate_ = value;
      }
    }


    /// <summary>Field number for the "Reqdate" field.</summary>
    public const int ReqdateFieldNumber = 4;
    private string reqdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reqdate {
      get { return reqdate_; }
      set {
        reqdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fund" field.</summary>
    public const int FundFieldNumber = 5;
    private string fund_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fund {
      get { return fund_; }
      set {
        fund_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Customer" field.</summary>
    public const int CustomerFieldNumber = 6;
    private string customer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Customer {
      get { return customer_; }
      set {
        customer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Location" field.</summary>
    public const int LocationFieldNumber = 7;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Billcust" field.</summary>
    public const int BillcustFieldNumber = 8;
    private string billcust_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Billcust {
      get { return billcust_; }
      set {
        billcust_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Contact" field.</summary>
    public const int ContactFieldNumber = 9;
    private string contact_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contact {
      get { return contact_; }
      set {
        contact_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Destination" field.</summary>
    public const int DestinationFieldNumber = 10;
    private int destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Destination {
      get { return destination_; }
      set {
        destination_ = value;
      }
    }

    /// <summary>Field number for the "Depdate" field.</summary>
    public const int DepdateFieldNumber = 11;
    private string depdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Depdate {
      get { return depdate_; }
      set {
        depdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Deptime" field.</summary>
    public const int DeptimeFieldNumber = 12;
    private string deptime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Deptime {
      get { return deptime_; }
      set {
        deptime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Retdate" field.</summary>
    public const int RetdateFieldNumber = 13;
    private string retdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Retdate {
      get { return retdate_; }
      set {
        retdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Rettime" field.</summary>
    public const int RettimeFieldNumber = 14;
    private string rettime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rettime {
      get { return rettime_; }
      set {
        rettime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Arrivetime" field.</summary>
    public const int ArrivetimeFieldNumber = 15;
    private string arrivetime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arrivetime {
      get { return arrivetime_; }
      set {
        arrivetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Leavetime" field.</summary>
    public const int LeavetimeFieldNumber = 16;
    private string leavetime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Leavetime {
      get { return leavetime_; }
      set {
        leavetime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Estmile" field.</summary>
    public const int EstmileFieldNumber = 17;
    private static readonly pb::FieldCodec<float?> _single_estmile_codec = pb::FieldCodec.ForStructWrapper<float>(138);
    private float? estmile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Estmile {
      get { return estmile_; }
      set {
        estmile_ = value;
      }
    }


    /// <summary>Field number for the "Esttime" field.</summary>
    public const int EsttimeFieldNumber = 18;
    private static readonly pb::FieldCodec<float?> _single_esttime_codec = pb::FieldCodec.ForStructWrapper<float>(146);
    private float? esttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? Esttime {
      get { return esttime_; }
      set {
        esttime_ = value;
      }
    }


    /// <summary>Field number for the "Numstudents" field.</summary>
    public const int NumstudentsFieldNumber = 19;
    private int numstudents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numstudents {
      get { return numstudents_; }
      set {
        numstudents_ = value;
      }
    }

    /// <summary>Field number for the "Numadults" field.</summary>
    public const int NumadultsFieldNumber = 20;
    private int numadults_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numadults {
      get { return numadults_; }
      set {
        numadults_ = value;
      }
    }

    /// <summary>Field number for the "Numhand" field.</summary>
    public const int NumhandFieldNumber = 21;
    private static readonly pb::FieldCodec<int?> _single_numhand_codec = pb::FieldCodec.ForStructWrapper<int>(170);
    private int? numhand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Numhand {
      get { return numhand_; }
      set {
        numhand_ = value;
      }
    }


    /// <summary>Field number for the "Purpose" field.</summary>
    public const int PurposeFieldNumber = 22;
    private string purpose_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Purpose {
      get { return purpose_; }
      set {
        purpose_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Destspec" field.</summary>
    public const int DestspecFieldNumber = 23;
    private string destspec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destspec {
      get { return destspec_; }
      set {
        destspec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Outoftown" field.</summary>
    public const int OutoftownFieldNumber = 24;
    private bool outoftown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Outoftown {
      get { return outoftown_; }
      set {
        outoftown_ = value;
      }
    }

    /// <summary>Field number for the "Schedule" field.</summary>
    public const int ScheduleFieldNumber = 25;
    private string schedule_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule {
      get { return schedule_; }
      set {
        schedule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Schedule2" field.</summary>
    public const int Schedule2FieldNumber = 26;
    private string schedule2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule2 {
      get { return schedule2_; }
      set {
        schedule2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Schedule3" field.</summary>
    public const int Schedule3FieldNumber = 27;
    private string schedule3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule3 {
      get { return schedule3_; }
      set {
        schedule3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Schedule4" field.</summary>
    public const int Schedule4FieldNumber = 28;
    private string schedule4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule4 {
      get { return schedule4_; }
      set {
        schedule4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Schedule5" field.</summary>
    public const int Schedule5FieldNumber = 29;
    private string schedule5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schedule5 {
      get { return schedule5_; }
      set {
        schedule5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Calcnumdrivers" field.</summary>
    public const int CalcnumdriversFieldNumber = 30;
    private bool calcnumdrivers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Calcnumdrivers {
      get { return calcnumdrivers_; }
      set {
        calcnumdrivers_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 31;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Numtype" field.</summary>
    public const int NumtypeFieldNumber = 32;
    private int numtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numtype {
      get { return numtype_; }
      set {
        numtype_ = value;
      }
    }

    /// <summary>Field number for the "Capacity" field.</summary>
    public const int CapacityFieldNumber = 33;
    private string capacity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Capacity {
      get { return capacity_; }
      set {
        capacity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Addltype" field.</summary>
    public const int AddltypeFieldNumber = 34;
    private string addltype_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addltype {
      get { return addltype_; }
      set {
        addltype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Numaddl" field.</summary>
    public const int NumaddlFieldNumber = 35;
    private int numaddl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numaddl {
      get { return numaddl_; }
      set {
        numaddl_ = value;
      }
    }

    /// <summary>Field number for the "Bill" field.</summary>
    public const int BillFieldNumber = 36;
    private bool bill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bill {
      get { return bill_; }
      set {
        bill_ = value;
      }
    }

    /// <summary>Field number for the "Custspec" field.</summary>
    public const int CustspecFieldNumber = 37;
    private string custspec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Custspec {
      get { return custspec_; }
      set {
        custspec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Assigned" field.</summary>
    public const int AssignedFieldNumber = 38;
    private bool assigned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Assigned {
      get { return assigned_; }
      set {
        assigned_ = value;
      }
    }

    /// <summary>Field number for the "Billed" field.</summary>
    public const int BilledFieldNumber = 39;
    private bool billed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Billed {
      get { return billed_; }
      set {
        billed_ = value;
      }
    }

    /// <summary>Field number for the "Billdate" field.</summary>
    public const int BilldateFieldNumber = 40;
    private string billdate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Billdate {
      get { return billdate_; }
      set {
        billdate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Canceled" field.</summary>
    public const int CanceledFieldNumber = 41;
    private bool canceled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Canceled {
      get { return canceled_; }
      set {
        canceled_ = value;
      }
    }

    /// <summary>Field number for the "Candate" field.</summary>
    public const int CandateFieldNumber = 42;
    private string candate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Candate {
      get { return candate_; }
      set {
        candate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Numveh" field.</summary>
    public const int NumvehFieldNumber = 43;
    private int numveh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numveh {
      get { return numveh_; }
      set {
        numveh_ = value;
      }
    }

    /// <summary>Field number for the "Dropret" field.</summary>
    public const int DropretFieldNumber = 44;
    private bool dropret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dropret {
      get { return dropret_; }
      set {
        dropret_ = value;
      }
    }

    /// <summary>Field number for the "Tripcom" field.</summary>
    public const int TripcomFieldNumber = 45;
    private string tripcom_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tripcom {
      get { return tripcom_; }
      set {
        tripcom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Autoassign" field.</summary>
    public const int AutoassignFieldNumber = 46;
    private bool autoassign_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Autoassign {
      get { return autoassign_; }
      set {
        autoassign_ = value;
      }
    }

    /// <summary>Field number for the "Po" field.</summary>
    public const int PoFieldNumber = 47;
    private string po_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Po {
      get { return po_; }
      set {
        po_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tripcat" field.</summary>
    public const int TripcatFieldNumber = 48;
    private string tripcat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tripcat {
      get { return tripcat_; }
      set {
        tripcat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Inttripnum" field.</summary>
    public const int InttripnumFieldNumber = 49;
    private string inttripnum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Inttripnum {
      get { return inttripnum_; }
      set {
        inttripnum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tripreqnum" field.</summary>
    public const int TripreqnumFieldNumber = 50;
    private int tripreqnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tripreqnum {
      get { return tripreqnum_; }
      set {
        tripreqnum_ = value;
      }
    }

    /// <summary>Field number for the "Amount1" field.</summary>
    public const int Amount1FieldNumber = 51;
    private float amount1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount1 {
      get { return amount1_; }
      set {
        amount1_ = value;
      }
    }

    /// <summary>Field number for the "Amount2" field.</summary>
    public const int Amount2FieldNumber = 52;
    private float amount2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount2 {
      get { return amount2_; }
      set {
        amount2_ = value;
      }
    }

    /// <summary>Field number for the "Amount3" field.</summary>
    public const int Amount3FieldNumber = 53;
    private float amount3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount3 {
      get { return amount3_; }
      set {
        amount3_ = value;
      }
    }

    /// <summary>Field number for the "Amount4" field.</summary>
    public const int Amount4FieldNumber = 54;
    private float amount4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount4 {
      get { return amount4_; }
      set {
        amount4_ = value;
      }
    }

    /// <summary>Field number for the "Amount5" field.</summary>
    public const int Amount5FieldNumber = 55;
    private float amount5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Amount5 {
      get { return amount5_; }
      set {
        amount5_ = value;
      }
    }

    /// <summary>Field number for the "Amounttxt1" field.</summary>
    public const int Amounttxt1FieldNumber = 56;
    private string amounttxt1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt1 {
      get { return amounttxt1_; }
      set {
        amounttxt1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Amounttxt2" field.</summary>
    public const int Amounttxt2FieldNumber = 57;
    private string amounttxt2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt2 {
      get { return amounttxt2_; }
      set {
        amounttxt2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Amounttxt3" field.</summary>
    public const int Amounttxt3FieldNumber = 58;
    private string amounttxt3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt3 {
      get { return amounttxt3_; }
      set {
        amounttxt3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Amounttxt4" field.</summary>
    public const int Amounttxt4FieldNumber = 59;
    private string amounttxt4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt4 {
      get { return amounttxt4_; }
      set {
        amounttxt4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Amounttxt5" field.</summary>
    public const int Amounttxt5FieldNumber = 60;
    private string amounttxt5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amounttxt5 {
      get { return amounttxt5_; }
      set {
        amounttxt5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Grade" field.</summary>
    public const int GradeFieldNumber = 61;
    private string grade_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Grade {
      get { return grade_; }
      set {
        grade_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Split" field.</summary>
    public const int SplitFieldNumber = 62;
    private bool split_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Split {
      get { return split_; }
      set {
        split_ = value;
      }
    }

    /// <summary>Field number for the "InvoiceFormat" field.</summary>
    public const int InvoiceFormatFieldNumber = 63;
    private string invoiceFormat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvoiceFormat {
      get { return invoiceFormat_; }
      set {
        invoiceFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InvoiceComment1" field.</summary>
    public const int InvoiceComment1FieldNumber = 64;
    private string invoiceComment1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InvoiceComment1 {
      get { return invoiceComment1_; }
      set {
        invoiceComment1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Multidest" field.</summary>
    public const int MultidestFieldNumber = 65;
    private bool multidest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Multidest {
      get { return multidest_; }
      set {
        multidest_ = value;
      }
    }

    /// <summary>Field number for the "Shuttle" field.</summary>
    public const int ShuttleFieldNumber = 66;
    private bool shuttle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shuttle {
      get { return shuttle_; }
      set {
        shuttle_ = value;
      }
    }

    /// <summary>Field number for the "TicketFormat" field.</summary>
    public const int TicketFormatFieldNumber = 67;
    private string ticketFormat_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TicketFormat {
      get { return ticketFormat_; }
      set {
        ticketFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Numchar" field.</summary>
    public const int NumcharFieldNumber = 68;
    private int numchar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numchar {
      get { return numchar_; }
      set {
        numchar_ = value;
      }
    }

    /// <summary>Field number for the "RequestorEmail" field.</summary>
    public const int RequestorEmailFieldNumber = 69;
    private string requestorEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestorEmail {
      get { return requestorEmail_; }
      set {
        requestorEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AdministratorEmail" field.</summary>
    public const int AdministratorEmailFieldNumber = 70;
    private string administratorEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdministratorEmail {
      get { return administratorEmail_; }
      set {
        administratorEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApproverEmail" field.</summary>
    public const int ApproverEmailFieldNumber = 71;
    private string approverEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApproverEmail {
      get { return approverEmail_; }
      set {
        approverEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DateEntered" field.</summary>
    public const int DateEnteredFieldNumber = 72;
    private string dateEntered_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateEntered {
      get { return dateEntered_; }
      set {
        dateEntered_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserEntered" field.</summary>
    public const int UserEnteredFieldNumber = 73;
    private string userEntered_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserEntered {
      get { return userEntered_; }
      set {
        userEntered_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DateLastchanged" field.</summary>
    public const int DateLastchangedFieldNumber = 74;
    private string dateLastchanged_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateLastchanged {
      get { return dateLastchanged_; }
      set {
        dateLastchanged_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserLastchanged" field.</summary>
    public const int UserLastchangedFieldNumber = 75;
    private string userLastchanged_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserLastchanged {
      get { return userLastchanged_; }
      set {
        userLastchanged_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "User1" field.</summary>
    public const int User1FieldNumber = 76;
    private string user1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User1 {
      get { return user1_; }
      set {
        user1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "User2" field.</summary>
    public const int User2FieldNumber = 77;
    private string user2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User2 {
      get { return user2_; }
      set {
        user2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Userdate1" field.</summary>
    public const int Userdate1FieldNumber = 78;
    private string userdate1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userdate1 {
      get { return userdate1_; }
      set {
        userdate1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Userdate2" field.</summary>
    public const int Userdate2FieldNumber = 79;
    private string userdate2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userdate2 {
      get { return userdate2_; }
      set {
        userdate2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SsmaTimeStamp" field.</summary>
    public const int SsmaTimeStampFieldNumber = 80;
    private string ssmaTimeStamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SsmaTimeStamp {
      get { return ssmaTimeStamp_; }
      set {
        ssmaTimeStamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTripsReqRequiredResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTripsReqRequiredResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TripNum != other.TripNum) return false;
      if (Prefix != other.Prefix) return false;
      if (Billrate != other.Billrate) return false;
      if (Reqdate != other.Reqdate) return false;
      if (Fund != other.Fund) return false;
      if (Customer != other.Customer) return false;
      if (Location != other.Location) return false;
      if (Billcust != other.Billcust) return false;
      if (Contact != other.Contact) return false;
      if (Destination != other.Destination) return false;
      if (Depdate != other.Depdate) return false;
      if (Deptime != other.Deptime) return false;
      if (Retdate != other.Retdate) return false;
      if (Rettime != other.Rettime) return false;
      if (Arrivetime != other.Arrivetime) return false;
      if (Leavetime != other.Leavetime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Estmile, other.Estmile)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(Esttime, other.Esttime)) return false;
      if (Numstudents != other.Numstudents) return false;
      if (Numadults != other.Numadults) return false;
      if (Numhand != other.Numhand) return false;
      if (Purpose != other.Purpose) return false;
      if (Destspec != other.Destspec) return false;
      if (Outoftown != other.Outoftown) return false;
      if (Schedule != other.Schedule) return false;
      if (Schedule2 != other.Schedule2) return false;
      if (Schedule3 != other.Schedule3) return false;
      if (Schedule4 != other.Schedule4) return false;
      if (Schedule5 != other.Schedule5) return false;
      if (Calcnumdrivers != other.Calcnumdrivers) return false;
      if (Type != other.Type) return false;
      if (Numtype != other.Numtype) return false;
      if (Capacity != other.Capacity) return false;
      if (Addltype != other.Addltype) return false;
      if (Numaddl != other.Numaddl) return false;
      if (Bill != other.Bill) return false;
      if (Custspec != other.Custspec) return false;
      if (Assigned != other.Assigned) return false;
      if (Billed != other.Billed) return false;
      if (Billdate != other.Billdate) return false;
      if (Canceled != other.Canceled) return false;
      if (Candate != other.Candate) return false;
      if (Numveh != other.Numveh) return false;
      if (Dropret != other.Dropret) return false;
      if (Tripcom != other.Tripcom) return false;
      if (Autoassign != other.Autoassign) return false;
      if (Po != other.Po) return false;
      if (Tripcat != other.Tripcat) return false;
      if (Inttripnum != other.Inttripnum) return false;
      if (Tripreqnum != other.Tripreqnum) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount1, other.Amount1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount2, other.Amount2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount3, other.Amount3)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount4, other.Amount4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amount5, other.Amount5)) return false;
      if (Amounttxt1 != other.Amounttxt1) return false;
      if (Amounttxt2 != other.Amounttxt2) return false;
      if (Amounttxt3 != other.Amounttxt3) return false;
      if (Amounttxt4 != other.Amounttxt4) return false;
      if (Amounttxt5 != other.Amounttxt5) return false;
      if (Grade != other.Grade) return false;
      if (Split != other.Split) return false;
      if (InvoiceFormat != other.InvoiceFormat) return false;
      if (InvoiceComment1 != other.InvoiceComment1) return false;
      if (Multidest != other.Multidest) return false;
      if (Shuttle != other.Shuttle) return false;
      if (TicketFormat != other.TicketFormat) return false;
      if (Numchar != other.Numchar) return false;
      if (RequestorEmail != other.RequestorEmail) return false;
      if (AdministratorEmail != other.AdministratorEmail) return false;
      if (ApproverEmail != other.ApproverEmail) return false;
      if (DateEntered != other.DateEntered) return false;
      if (UserEntered != other.UserEntered) return false;
      if (DateLastchanged != other.DateLastchanged) return false;
      if (UserLastchanged != other.UserLastchanged) return false;
      if (User1 != other.User1) return false;
      if (User2 != other.User2) return false;
      if (Userdate1 != other.Userdate1) return false;
      if (Userdate2 != other.Userdate2) return false;
      if (SsmaTimeStamp != other.SsmaTimeStamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TripNum != 0) hash ^= TripNum.GetHashCode();
      if (Prefix.Length != 0) hash ^= Prefix.GetHashCode();
      if (billrate_ != null) hash ^= Billrate.GetHashCode();
      if (Reqdate.Length != 0) hash ^= Reqdate.GetHashCode();
      if (Fund.Length != 0) hash ^= Fund.GetHashCode();
      if (Customer.Length != 0) hash ^= Customer.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Billcust.Length != 0) hash ^= Billcust.GetHashCode();
      if (Contact.Length != 0) hash ^= Contact.GetHashCode();
      if (Destination != 0) hash ^= Destination.GetHashCode();
      if (Depdate.Length != 0) hash ^= Depdate.GetHashCode();
      if (Deptime.Length != 0) hash ^= Deptime.GetHashCode();
      if (Retdate.Length != 0) hash ^= Retdate.GetHashCode();
      if (Rettime.Length != 0) hash ^= Rettime.GetHashCode();
      if (Arrivetime.Length != 0) hash ^= Arrivetime.GetHashCode();
      if (Leavetime.Length != 0) hash ^= Leavetime.GetHashCode();
      if (estmile_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Estmile);
      if (esttime_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(Esttime);
      if (Numstudents != 0) hash ^= Numstudents.GetHashCode();
      if (Numadults != 0) hash ^= Numadults.GetHashCode();
      if (numhand_ != null) hash ^= Numhand.GetHashCode();
      if (Purpose.Length != 0) hash ^= Purpose.GetHashCode();
      if (Destspec.Length != 0) hash ^= Destspec.GetHashCode();
      if (Outoftown != false) hash ^= Outoftown.GetHashCode();
      if (Schedule.Length != 0) hash ^= Schedule.GetHashCode();
      if (Schedule2.Length != 0) hash ^= Schedule2.GetHashCode();
      if (Schedule3.Length != 0) hash ^= Schedule3.GetHashCode();
      if (Schedule4.Length != 0) hash ^= Schedule4.GetHashCode();
      if (Schedule5.Length != 0) hash ^= Schedule5.GetHashCode();
      if (Calcnumdrivers != false) hash ^= Calcnumdrivers.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Numtype != 0) hash ^= Numtype.GetHashCode();
      if (Capacity.Length != 0) hash ^= Capacity.GetHashCode();
      if (Addltype.Length != 0) hash ^= Addltype.GetHashCode();
      if (Numaddl != 0) hash ^= Numaddl.GetHashCode();
      if (Bill != false) hash ^= Bill.GetHashCode();
      if (Custspec.Length != 0) hash ^= Custspec.GetHashCode();
      if (Assigned != false) hash ^= Assigned.GetHashCode();
      if (Billed != false) hash ^= Billed.GetHashCode();
      if (Billdate.Length != 0) hash ^= Billdate.GetHashCode();
      if (Canceled != false) hash ^= Canceled.GetHashCode();
      if (Candate.Length != 0) hash ^= Candate.GetHashCode();
      if (Numveh != 0) hash ^= Numveh.GetHashCode();
      if (Dropret != false) hash ^= Dropret.GetHashCode();
      if (Tripcom.Length != 0) hash ^= Tripcom.GetHashCode();
      if (Autoassign != false) hash ^= Autoassign.GetHashCode();
      if (Po.Length != 0) hash ^= Po.GetHashCode();
      if (Tripcat.Length != 0) hash ^= Tripcat.GetHashCode();
      if (Inttripnum.Length != 0) hash ^= Inttripnum.GetHashCode();
      if (Tripreqnum != 0) hash ^= Tripreqnum.GetHashCode();
      if (Amount1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount1);
      if (Amount2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount2);
      if (Amount3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount3);
      if (Amount4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount4);
      if (Amount5 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amount5);
      if (Amounttxt1.Length != 0) hash ^= Amounttxt1.GetHashCode();
      if (Amounttxt2.Length != 0) hash ^= Amounttxt2.GetHashCode();
      if (Amounttxt3.Length != 0) hash ^= Amounttxt3.GetHashCode();
      if (Amounttxt4.Length != 0) hash ^= Amounttxt4.GetHashCode();
      if (Amounttxt5.Length != 0) hash ^= Amounttxt5.GetHashCode();
      if (Grade.Length != 0) hash ^= Grade.GetHashCode();
      if (Split != false) hash ^= Split.GetHashCode();
      if (InvoiceFormat.Length != 0) hash ^= InvoiceFormat.GetHashCode();
      if (InvoiceComment1.Length != 0) hash ^= InvoiceComment1.GetHashCode();
      if (Multidest != false) hash ^= Multidest.GetHashCode();
      if (Shuttle != false) hash ^= Shuttle.GetHashCode();
      if (TicketFormat.Length != 0) hash ^= TicketFormat.GetHashCode();
      if (Numchar != 0) hash ^= Numchar.GetHashCode();
      if (RequestorEmail.Length != 0) hash ^= RequestorEmail.GetHashCode();
      if (AdministratorEmail.Length != 0) hash ^= AdministratorEmail.GetHashCode();
      if (ApproverEmail.Length != 0) hash ^= ApproverEmail.GetHashCode();
      if (DateEntered.Length != 0) hash ^= DateEntered.GetHashCode();
      if (UserEntered.Length != 0) hash ^= UserEntered.GetHashCode();
      if (DateLastchanged.Length != 0) hash ^= DateLastchanged.GetHashCode();
      if (UserLastchanged.Length != 0) hash ^= UserLastchanged.GetHashCode();
      if (User1.Length != 0) hash ^= User1.GetHashCode();
      if (User2.Length != 0) hash ^= User2.GetHashCode();
      if (Userdate1.Length != 0) hash ^= Userdate1.GetHashCode();
      if (Userdate2.Length != 0) hash ^= Userdate2.GetHashCode();
      if (SsmaTimeStamp.Length != 0) hash ^= SsmaTimeStamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TripNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TripNum);
      }
      if (Prefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Prefix);
      }
      if (billrate_ != null) {
        _single_billrate_codec.WriteTagAndValue(output, Billrate);
      }
      if (Reqdate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reqdate);
      }
      if (Fund.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Fund);
      }
      if (Customer.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Customer);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Location);
      }
      if (Billcust.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Billcust);
      }
      if (Contact.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Contact);
      }
      if (Destination != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Destination);
      }
      if (Depdate.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Depdate);
      }
      if (Deptime.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Deptime);
      }
      if (Retdate.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Retdate);
      }
      if (Rettime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Rettime);
      }
      if (Arrivetime.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Arrivetime);
      }
      if (Leavetime.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Leavetime);
      }
      if (estmile_ != null) {
        _single_estmile_codec.WriteTagAndValue(output, Estmile);
      }
      if (esttime_ != null) {
        _single_esttime_codec.WriteTagAndValue(output, Esttime);
      }
      if (Numstudents != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Numstudents);
      }
      if (Numadults != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Numadults);
      }
      if (numhand_ != null) {
        _single_numhand_codec.WriteTagAndValue(output, Numhand);
      }
      if (Purpose.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Purpose);
      }
      if (Destspec.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Destspec);
      }
      if (Outoftown != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Outoftown);
      }
      if (Schedule.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Schedule);
      }
      if (Schedule2.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Schedule2);
      }
      if (Schedule3.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Schedule3);
      }
      if (Schedule4.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Schedule4);
      }
      if (Schedule5.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Schedule5);
      }
      if (Calcnumdrivers != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Calcnumdrivers);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Type);
      }
      if (Numtype != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Numtype);
      }
      if (Capacity.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Capacity);
      }
      if (Addltype.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Addltype);
      }
      if (Numaddl != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Numaddl);
      }
      if (Bill != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Bill);
      }
      if (Custspec.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(Custspec);
      }
      if (Assigned != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(Assigned);
      }
      if (Billed != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(Billed);
      }
      if (Billdate.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Billdate);
      }
      if (Canceled != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(Canceled);
      }
      if (Candate.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(Candate);
      }
      if (Numveh != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(Numveh);
      }
      if (Dropret != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(Dropret);
      }
      if (Tripcom.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(Tripcom);
      }
      if (Autoassign != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(Autoassign);
      }
      if (Po.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(Po);
      }
      if (Tripcat.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Tripcat);
      }
      if (Inttripnum.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Inttripnum);
      }
      if (Tripreqnum != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(Tripreqnum);
      }
      if (Amount1 != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(Amount1);
      }
      if (Amount2 != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(Amount2);
      }
      if (Amount3 != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(Amount3);
      }
      if (Amount4 != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(Amount4);
      }
      if (Amount5 != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(Amount5);
      }
      if (Amounttxt1.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Amounttxt1);
      }
      if (Amounttxt2.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(Amounttxt2);
      }
      if (Amounttxt3.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Amounttxt3);
      }
      if (Amounttxt4.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(Amounttxt4);
      }
      if (Amounttxt5.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(Amounttxt5);
      }
      if (Grade.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(Grade);
      }
      if (Split != false) {
        output.WriteRawTag(240, 3);
        output.WriteBool(Split);
      }
      if (InvoiceFormat.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(InvoiceFormat);
      }
      if (InvoiceComment1.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(InvoiceComment1);
      }
      if (Multidest != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(Multidest);
      }
      if (Shuttle != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(Shuttle);
      }
      if (TicketFormat.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(TicketFormat);
      }
      if (Numchar != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(Numchar);
      }
      if (RequestorEmail.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteString(RequestorEmail);
      }
      if (AdministratorEmail.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(AdministratorEmail);
      }
      if (ApproverEmail.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteString(ApproverEmail);
      }
      if (DateEntered.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(DateEntered);
      }
      if (UserEntered.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(UserEntered);
      }
      if (DateLastchanged.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteString(DateLastchanged);
      }
      if (UserLastchanged.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(UserLastchanged);
      }
      if (User1.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(User1);
      }
      if (User2.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(User2);
      }
      if (Userdate1.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(Userdate1);
      }
      if (Userdate2.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(Userdate2);
      }
      if (SsmaTimeStamp.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(SsmaTimeStamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TripNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TripNum);
      }
      if (Prefix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Prefix);
      }
      if (billrate_ != null) {
        _single_billrate_codec.WriteTagAndValue(ref output, Billrate);
      }
      if (Reqdate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reqdate);
      }
      if (Fund.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Fund);
      }
      if (Customer.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Customer);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Location);
      }
      if (Billcust.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Billcust);
      }
      if (Contact.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Contact);
      }
      if (Destination != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Destination);
      }
      if (Depdate.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Depdate);
      }
      if (Deptime.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Deptime);
      }
      if (Retdate.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Retdate);
      }
      if (Rettime.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Rettime);
      }
      if (Arrivetime.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Arrivetime);
      }
      if (Leavetime.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Leavetime);
      }
      if (estmile_ != null) {
        _single_estmile_codec.WriteTagAndValue(ref output, Estmile);
      }
      if (esttime_ != null) {
        _single_esttime_codec.WriteTagAndValue(ref output, Esttime);
      }
      if (Numstudents != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Numstudents);
      }
      if (Numadults != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Numadults);
      }
      if (numhand_ != null) {
        _single_numhand_codec.WriteTagAndValue(ref output, Numhand);
      }
      if (Purpose.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Purpose);
      }
      if (Destspec.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Destspec);
      }
      if (Outoftown != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Outoftown);
      }
      if (Schedule.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Schedule);
      }
      if (Schedule2.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(Schedule2);
      }
      if (Schedule3.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Schedule3);
      }
      if (Schedule4.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(Schedule4);
      }
      if (Schedule5.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Schedule5);
      }
      if (Calcnumdrivers != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Calcnumdrivers);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(Type);
      }
      if (Numtype != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Numtype);
      }
      if (Capacity.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Capacity);
      }
      if (Addltype.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Addltype);
      }
      if (Numaddl != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Numaddl);
      }
      if (Bill != false) {
        output.WriteRawTag(160, 2);
        output.WriteBool(Bill);
      }
      if (Custspec.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(Custspec);
      }
      if (Assigned != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(Assigned);
      }
      if (Billed != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(Billed);
      }
      if (Billdate.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Billdate);
      }
      if (Canceled != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(Canceled);
      }
      if (Candate.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(Candate);
      }
      if (Numveh != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(Numveh);
      }
      if (Dropret != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(Dropret);
      }
      if (Tripcom.Length != 0) {
        output.WriteRawTag(234, 2);
        output.WriteString(Tripcom);
      }
      if (Autoassign != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(Autoassign);
      }
      if (Po.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(Po);
      }
      if (Tripcat.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Tripcat);
      }
      if (Inttripnum.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Inttripnum);
      }
      if (Tripreqnum != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(Tripreqnum);
      }
      if (Amount1 != 0F) {
        output.WriteRawTag(157, 3);
        output.WriteFloat(Amount1);
      }
      if (Amount2 != 0F) {
        output.WriteRawTag(165, 3);
        output.WriteFloat(Amount2);
      }
      if (Amount3 != 0F) {
        output.WriteRawTag(173, 3);
        output.WriteFloat(Amount3);
      }
      if (Amount4 != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(Amount4);
      }
      if (Amount5 != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(Amount5);
      }
      if (Amounttxt1.Length != 0) {
        output.WriteRawTag(194, 3);
        output.WriteString(Amounttxt1);
      }
      if (Amounttxt2.Length != 0) {
        output.WriteRawTag(202, 3);
        output.WriteString(Amounttxt2);
      }
      if (Amounttxt3.Length != 0) {
        output.WriteRawTag(210, 3);
        output.WriteString(Amounttxt3);
      }
      if (Amounttxt4.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(Amounttxt4);
      }
      if (Amounttxt5.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(Amounttxt5);
      }
      if (Grade.Length != 0) {
        output.WriteRawTag(234, 3);
        output.WriteString(Grade);
      }
      if (Split != false) {
        output.WriteRawTag(240, 3);
        output.WriteBool(Split);
      }
      if (InvoiceFormat.Length != 0) {
        output.WriteRawTag(250, 3);
        output.WriteString(InvoiceFormat);
      }
      if (InvoiceComment1.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteString(InvoiceComment1);
      }
      if (Multidest != false) {
        output.WriteRawTag(136, 4);
        output.WriteBool(Multidest);
      }
      if (Shuttle != false) {
        output.WriteRawTag(144, 4);
        output.WriteBool(Shuttle);
      }
      if (TicketFormat.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(TicketFormat);
      }
      if (Numchar != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(Numchar);
      }
      if (RequestorEmail.Length != 0) {
        output.WriteRawTag(170, 4);
        output.WriteString(RequestorEmail);
      }
      if (AdministratorEmail.Length != 0) {
        output.WriteRawTag(178, 4);
        output.WriteString(AdministratorEmail);
      }
      if (ApproverEmail.Length != 0) {
        output.WriteRawTag(186, 4);
        output.WriteString(ApproverEmail);
      }
      if (DateEntered.Length != 0) {
        output.WriteRawTag(194, 4);
        output.WriteString(DateEntered);
      }
      if (UserEntered.Length != 0) {
        output.WriteRawTag(202, 4);
        output.WriteString(UserEntered);
      }
      if (DateLastchanged.Length != 0) {
        output.WriteRawTag(210, 4);
        output.WriteString(DateLastchanged);
      }
      if (UserLastchanged.Length != 0) {
        output.WriteRawTag(218, 4);
        output.WriteString(UserLastchanged);
      }
      if (User1.Length != 0) {
        output.WriteRawTag(226, 4);
        output.WriteString(User1);
      }
      if (User2.Length != 0) {
        output.WriteRawTag(234, 4);
        output.WriteString(User2);
      }
      if (Userdate1.Length != 0) {
        output.WriteRawTag(242, 4);
        output.WriteString(Userdate1);
      }
      if (Userdate2.Length != 0) {
        output.WriteRawTag(250, 4);
        output.WriteString(Userdate2);
      }
      if (SsmaTimeStamp.Length != 0) {
        output.WriteRawTag(130, 5);
        output.WriteString(SsmaTimeStamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TripNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TripNum);
      }
      if (Prefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
      }
      if (billrate_ != null) {
        size += _single_billrate_codec.CalculateSizeWithTag(Billrate);
      }
      if (Reqdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reqdate);
      }
      if (Fund.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fund);
      }
      if (Customer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Customer);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Billcust.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Billcust);
      }
      if (Contact.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contact);
      }
      if (Destination != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Destination);
      }
      if (Depdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Depdate);
      }
      if (Deptime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Deptime);
      }
      if (Retdate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Retdate);
      }
      if (Rettime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rettime);
      }
      if (Arrivetime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arrivetime);
      }
      if (Leavetime.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Leavetime);
      }
      if (estmile_ != null) {
        size += _single_estmile_codec.CalculateSizeWithTag(Estmile);
      }
      if (esttime_ != null) {
        size += _single_esttime_codec.CalculateSizeWithTag(Esttime);
      }
      if (Numstudents != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numstudents);
      }
      if (Numadults != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numadults);
      }
      if (numhand_ != null) {
        size += _single_numhand_codec.CalculateSizeWithTag(Numhand);
      }
      if (Purpose.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Purpose);
      }
      if (Destspec.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Destspec);
      }
      if (Outoftown != false) {
        size += 2 + 1;
      }
      if (Schedule.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule);
      }
      if (Schedule2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule2);
      }
      if (Schedule3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule3);
      }
      if (Schedule4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule4);
      }
      if (Schedule5.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Schedule5);
      }
      if (Calcnumdrivers != false) {
        size += 2 + 1;
      }
      if (Type.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Numtype != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numtype);
      }
      if (Capacity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Capacity);
      }
      if (Addltype.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Addltype);
      }
      if (Numaddl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numaddl);
      }
      if (Bill != false) {
        size += 2 + 1;
      }
      if (Custspec.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Custspec);
      }
      if (Assigned != false) {
        size += 2 + 1;
      }
      if (Billed != false) {
        size += 2 + 1;
      }
      if (Billdate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Billdate);
      }
      if (Canceled != false) {
        size += 2 + 1;
      }
      if (Candate.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Candate);
      }
      if (Numveh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numveh);
      }
      if (Dropret != false) {
        size += 2 + 1;
      }
      if (Tripcom.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tripcom);
      }
      if (Autoassign != false) {
        size += 2 + 1;
      }
      if (Po.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Po);
      }
      if (Tripcat.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tripcat);
      }
      if (Inttripnum.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Inttripnum);
      }
      if (Tripreqnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tripreqnum);
      }
      if (Amount1 != 0F) {
        size += 2 + 4;
      }
      if (Amount2 != 0F) {
        size += 2 + 4;
      }
      if (Amount3 != 0F) {
        size += 2 + 4;
      }
      if (Amount4 != 0F) {
        size += 2 + 4;
      }
      if (Amount5 != 0F) {
        size += 2 + 4;
      }
      if (Amounttxt1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt1);
      }
      if (Amounttxt2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt2);
      }
      if (Amounttxt3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt3);
      }
      if (Amounttxt4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt4);
      }
      if (Amounttxt5.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Amounttxt5);
      }
      if (Grade.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Grade);
      }
      if (Split != false) {
        size += 2 + 1;
      }
      if (InvoiceFormat.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InvoiceFormat);
      }
      if (InvoiceComment1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InvoiceComment1);
      }
      if (Multidest != false) {
        size += 2 + 1;
      }
      if (Shuttle != false) {
        size += 2 + 1;
      }
      if (TicketFormat.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(TicketFormat);
      }
      if (Numchar != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Numchar);
      }
      if (RequestorEmail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RequestorEmail);
      }
      if (AdministratorEmail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdministratorEmail);
      }
      if (ApproverEmail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ApproverEmail);
      }
      if (DateEntered.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DateEntered);
      }
      if (UserEntered.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserEntered);
      }
      if (DateLastchanged.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DateLastchanged);
      }
      if (UserLastchanged.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserLastchanged);
      }
      if (User1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(User1);
      }
      if (User2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(User2);
      }
      if (Userdate1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Userdate1);
      }
      if (Userdate2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Userdate2);
      }
      if (SsmaTimeStamp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SsmaTimeStamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTripsReqRequiredResponse other) {
      if (other == null) {
        return;
      }
      if (other.TripNum != 0) {
        TripNum = other.TripNum;
      }
      if (other.Prefix.Length != 0) {
        Prefix = other.Prefix;
      }
      if (other.billrate_ != null) {
        if (billrate_ == null || other.Billrate != 0) {
          Billrate = other.Billrate;
        }
      }
      if (other.Reqdate.Length != 0) {
        Reqdate = other.Reqdate;
      }
      if (other.Fund.Length != 0) {
        Fund = other.Fund;
      }
      if (other.Customer.Length != 0) {
        Customer = other.Customer;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Billcust.Length != 0) {
        Billcust = other.Billcust;
      }
      if (other.Contact.Length != 0) {
        Contact = other.Contact;
      }
      if (other.Destination != 0) {
        Destination = other.Destination;
      }
      if (other.Depdate.Length != 0) {
        Depdate = other.Depdate;
      }
      if (other.Deptime.Length != 0) {
        Deptime = other.Deptime;
      }
      if (other.Retdate.Length != 0) {
        Retdate = other.Retdate;
      }
      if (other.Rettime.Length != 0) {
        Rettime = other.Rettime;
      }
      if (other.Arrivetime.Length != 0) {
        Arrivetime = other.Arrivetime;
      }
      if (other.Leavetime.Length != 0) {
        Leavetime = other.Leavetime;
      }
      if (other.estmile_ != null) {
        if (estmile_ == null || other.Estmile != 0F) {
          Estmile = other.Estmile;
        }
      }
      if (other.esttime_ != null) {
        if (esttime_ == null || other.Esttime != 0F) {
          Esttime = other.Esttime;
        }
      }
      if (other.Numstudents != 0) {
        Numstudents = other.Numstudents;
      }
      if (other.Numadults != 0) {
        Numadults = other.Numadults;
      }
      if (other.numhand_ != null) {
        if (numhand_ == null || other.Numhand != 0) {
          Numhand = other.Numhand;
        }
      }
      if (other.Purpose.Length != 0) {
        Purpose = other.Purpose;
      }
      if (other.Destspec.Length != 0) {
        Destspec = other.Destspec;
      }
      if (other.Outoftown != false) {
        Outoftown = other.Outoftown;
      }
      if (other.Schedule.Length != 0) {
        Schedule = other.Schedule;
      }
      if (other.Schedule2.Length != 0) {
        Schedule2 = other.Schedule2;
      }
      if (other.Schedule3.Length != 0) {
        Schedule3 = other.Schedule3;
      }
      if (other.Schedule4.Length != 0) {
        Schedule4 = other.Schedule4;
      }
      if (other.Schedule5.Length != 0) {
        Schedule5 = other.Schedule5;
      }
      if (other.Calcnumdrivers != false) {
        Calcnumdrivers = other.Calcnumdrivers;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Numtype != 0) {
        Numtype = other.Numtype;
      }
      if (other.Capacity.Length != 0) {
        Capacity = other.Capacity;
      }
      if (other.Addltype.Length != 0) {
        Addltype = other.Addltype;
      }
      if (other.Numaddl != 0) {
        Numaddl = other.Numaddl;
      }
      if (other.Bill != false) {
        Bill = other.Bill;
      }
      if (other.Custspec.Length != 0) {
        Custspec = other.Custspec;
      }
      if (other.Assigned != false) {
        Assigned = other.Assigned;
      }
      if (other.Billed != false) {
        Billed = other.Billed;
      }
      if (other.Billdate.Length != 0) {
        Billdate = other.Billdate;
      }
      if (other.Canceled != false) {
        Canceled = other.Canceled;
      }
      if (other.Candate.Length != 0) {
        Candate = other.Candate;
      }
      if (other.Numveh != 0) {
        Numveh = other.Numveh;
      }
      if (other.Dropret != false) {
        Dropret = other.Dropret;
      }
      if (other.Tripcom.Length != 0) {
        Tripcom = other.Tripcom;
      }
      if (other.Autoassign != false) {
        Autoassign = other.Autoassign;
      }
      if (other.Po.Length != 0) {
        Po = other.Po;
      }
      if (other.Tripcat.Length != 0) {
        Tripcat = other.Tripcat;
      }
      if (other.Inttripnum.Length != 0) {
        Inttripnum = other.Inttripnum;
      }
      if (other.Tripreqnum != 0) {
        Tripreqnum = other.Tripreqnum;
      }
      if (other.Amount1 != 0F) {
        Amount1 = other.Amount1;
      }
      if (other.Amount2 != 0F) {
        Amount2 = other.Amount2;
      }
      if (other.Amount3 != 0F) {
        Amount3 = other.Amount3;
      }
      if (other.Amount4 != 0F) {
        Amount4 = other.Amount4;
      }
      if (other.Amount5 != 0F) {
        Amount5 = other.Amount5;
      }
      if (other.Amounttxt1.Length != 0) {
        Amounttxt1 = other.Amounttxt1;
      }
      if (other.Amounttxt2.Length != 0) {
        Amounttxt2 = other.Amounttxt2;
      }
      if (other.Amounttxt3.Length != 0) {
        Amounttxt3 = other.Amounttxt3;
      }
      if (other.Amounttxt4.Length != 0) {
        Amounttxt4 = other.Amounttxt4;
      }
      if (other.Amounttxt5.Length != 0) {
        Amounttxt5 = other.Amounttxt5;
      }
      if (other.Grade.Length != 0) {
        Grade = other.Grade;
      }
      if (other.Split != false) {
        Split = other.Split;
      }
      if (other.InvoiceFormat.Length != 0) {
        InvoiceFormat = other.InvoiceFormat;
      }
      if (other.InvoiceComment1.Length != 0) {
        InvoiceComment1 = other.InvoiceComment1;
      }
      if (other.Multidest != false) {
        Multidest = other.Multidest;
      }
      if (other.Shuttle != false) {
        Shuttle = other.Shuttle;
      }
      if (other.TicketFormat.Length != 0) {
        TicketFormat = other.TicketFormat;
      }
      if (other.Numchar != 0) {
        Numchar = other.Numchar;
      }
      if (other.RequestorEmail.Length != 0) {
        RequestorEmail = other.RequestorEmail;
      }
      if (other.AdministratorEmail.Length != 0) {
        AdministratorEmail = other.AdministratorEmail;
      }
      if (other.ApproverEmail.Length != 0) {
        ApproverEmail = other.ApproverEmail;
      }
      if (other.DateEntered.Length != 0) {
        DateEntered = other.DateEntered;
      }
      if (other.UserEntered.Length != 0) {
        UserEntered = other.UserEntered;
      }
      if (other.DateLastchanged.Length != 0) {
        DateLastchanged = other.DateLastchanged;
      }
      if (other.UserLastchanged.Length != 0) {
        UserLastchanged = other.UserLastchanged;
      }
      if (other.User1.Length != 0) {
        User1 = other.User1;
      }
      if (other.User2.Length != 0) {
        User2 = other.User2;
      }
      if (other.Userdate1.Length != 0) {
        Userdate1 = other.Userdate1;
      }
      if (other.Userdate2.Length != 0) {
        Userdate2 = other.Userdate2;
      }
      if (other.SsmaTimeStamp.Length != 0) {
        SsmaTimeStamp = other.SsmaTimeStamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TripNum = input.ReadInt32();
            break;
          }
          case 18: {
            Prefix = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_billrate_codec.Read(input);
            if (billrate_ == null || value != 0) {
              Billrate = value;
            }
            break;
          }
          case 34: {
            Reqdate = input.ReadString();
            break;
          }
          case 42: {
            Fund = input.ReadString();
            break;
          }
          case 50: {
            Customer = input.ReadString();
            break;
          }
          case 58: {
            Location = input.ReadString();
            break;
          }
          case 66: {
            Billcust = input.ReadString();
            break;
          }
          case 74: {
            Contact = input.ReadString();
            break;
          }
          case 80: {
            Destination = input.ReadInt32();
            break;
          }
          case 90: {
            Depdate = input.ReadString();
            break;
          }
          case 98: {
            Deptime = input.ReadString();
            break;
          }
          case 106: {
            Retdate = input.ReadString();
            break;
          }
          case 114: {
            Rettime = input.ReadString();
            break;
          }
          case 122: {
            Arrivetime = input.ReadString();
            break;
          }
          case 130: {
            Leavetime = input.ReadString();
            break;
          }
          case 138: {
            float? value = _single_estmile_codec.Read(input);
            if (estmile_ == null || value != 0F) {
              Estmile = value;
            }
            break;
          }
          case 146: {
            float? value = _single_esttime_codec.Read(input);
            if (esttime_ == null || value != 0F) {
              Esttime = value;
            }
            break;
          }
          case 152: {
            Numstudents = input.ReadInt32();
            break;
          }
          case 160: {
            Numadults = input.ReadInt32();
            break;
          }
          case 170: {
            int? value = _single_numhand_codec.Read(input);
            if (numhand_ == null || value != 0) {
              Numhand = value;
            }
            break;
          }
          case 178: {
            Purpose = input.ReadString();
            break;
          }
          case 186: {
            Destspec = input.ReadString();
            break;
          }
          case 192: {
            Outoftown = input.ReadBool();
            break;
          }
          case 202: {
            Schedule = input.ReadString();
            break;
          }
          case 210: {
            Schedule2 = input.ReadString();
            break;
          }
          case 218: {
            Schedule3 = input.ReadString();
            break;
          }
          case 226: {
            Schedule4 = input.ReadString();
            break;
          }
          case 234: {
            Schedule5 = input.ReadString();
            break;
          }
          case 240: {
            Calcnumdrivers = input.ReadBool();
            break;
          }
          case 250: {
            Type = input.ReadString();
            break;
          }
          case 256: {
            Numtype = input.ReadInt32();
            break;
          }
          case 266: {
            Capacity = input.ReadString();
            break;
          }
          case 274: {
            Addltype = input.ReadString();
            break;
          }
          case 280: {
            Numaddl = input.ReadInt32();
            break;
          }
          case 288: {
            Bill = input.ReadBool();
            break;
          }
          case 298: {
            Custspec = input.ReadString();
            break;
          }
          case 304: {
            Assigned = input.ReadBool();
            break;
          }
          case 312: {
            Billed = input.ReadBool();
            break;
          }
          case 322: {
            Billdate = input.ReadString();
            break;
          }
          case 328: {
            Canceled = input.ReadBool();
            break;
          }
          case 338: {
            Candate = input.ReadString();
            break;
          }
          case 344: {
            Numveh = input.ReadInt32();
            break;
          }
          case 352: {
            Dropret = input.ReadBool();
            break;
          }
          case 362: {
            Tripcom = input.ReadString();
            break;
          }
          case 368: {
            Autoassign = input.ReadBool();
            break;
          }
          case 378: {
            Po = input.ReadString();
            break;
          }
          case 386: {
            Tripcat = input.ReadString();
            break;
          }
          case 394: {
            Inttripnum = input.ReadString();
            break;
          }
          case 400: {
            Tripreqnum = input.ReadInt32();
            break;
          }
          case 413: {
            Amount1 = input.ReadFloat();
            break;
          }
          case 421: {
            Amount2 = input.ReadFloat();
            break;
          }
          case 429: {
            Amount3 = input.ReadFloat();
            break;
          }
          case 437: {
            Amount4 = input.ReadFloat();
            break;
          }
          case 445: {
            Amount5 = input.ReadFloat();
            break;
          }
          case 450: {
            Amounttxt1 = input.ReadString();
            break;
          }
          case 458: {
            Amounttxt2 = input.ReadString();
            break;
          }
          case 466: {
            Amounttxt3 = input.ReadString();
            break;
          }
          case 474: {
            Amounttxt4 = input.ReadString();
            break;
          }
          case 482: {
            Amounttxt5 = input.ReadString();
            break;
          }
          case 490: {
            Grade = input.ReadString();
            break;
          }
          case 496: {
            Split = input.ReadBool();
            break;
          }
          case 506: {
            InvoiceFormat = input.ReadString();
            break;
          }
          case 514: {
            InvoiceComment1 = input.ReadString();
            break;
          }
          case 520: {
            Multidest = input.ReadBool();
            break;
          }
          case 528: {
            Shuttle = input.ReadBool();
            break;
          }
          case 538: {
            TicketFormat = input.ReadString();
            break;
          }
          case 544: {
            Numchar = input.ReadInt32();
            break;
          }
          case 554: {
            RequestorEmail = input.ReadString();
            break;
          }
          case 562: {
            AdministratorEmail = input.ReadString();
            break;
          }
          case 570: {
            ApproverEmail = input.ReadString();
            break;
          }
          case 578: {
            DateEntered = input.ReadString();
            break;
          }
          case 586: {
            UserEntered = input.ReadString();
            break;
          }
          case 594: {
            DateLastchanged = input.ReadString();
            break;
          }
          case 602: {
            UserLastchanged = input.ReadString();
            break;
          }
          case 610: {
            User1 = input.ReadString();
            break;
          }
          case 618: {
            User2 = input.ReadString();
            break;
          }
          case 626: {
            Userdate1 = input.ReadString();
            break;
          }
          case 634: {
            Userdate2 = input.ReadString();
            break;
          }
          case 642: {
            SsmaTimeStamp = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TripNum = input.ReadInt32();
            break;
          }
          case 18: {
            Prefix = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_billrate_codec.Read(ref input);
            if (billrate_ == null || value != 0) {
              Billrate = value;
            }
            break;
          }
          case 34: {
            Reqdate = input.ReadString();
            break;
          }
          case 42: {
            Fund = input.ReadString();
            break;
          }
          case 50: {
            Customer = input.ReadString();
            break;
          }
          case 58: {
            Location = input.ReadString();
            break;
          }
          case 66: {
            Billcust = input.ReadString();
            break;
          }
          case 74: {
            Contact = input.ReadString();
            break;
          }
          case 80: {
            Destination = input.ReadInt32();
            break;
          }
          case 90: {
            Depdate = input.ReadString();
            break;
          }
          case 98: {
            Deptime = input.ReadString();
            break;
          }
          case 106: {
            Retdate = input.ReadString();
            break;
          }
          case 114: {
            Rettime = input.ReadString();
            break;
          }
          case 122: {
            Arrivetime = input.ReadString();
            break;
          }
          case 130: {
            Leavetime = input.ReadString();
            break;
          }
          case 138: {
            float? value = _single_estmile_codec.Read(ref input);
            if (estmile_ == null || value != 0F) {
              Estmile = value;
            }
            break;
          }
          case 146: {
            float? value = _single_esttime_codec.Read(ref input);
            if (esttime_ == null || value != 0F) {
              Esttime = value;
            }
            break;
          }
          case 152: {
            Numstudents = input.ReadInt32();
            break;
          }
          case 160: {
            Numadults = input.ReadInt32();
            break;
          }
          case 170: {
            int? value = _single_numhand_codec.Read(ref input);
            if (numhand_ == null || value != 0) {
              Numhand = value;
            }
            break;
          }
          case 178: {
            Purpose = input.ReadString();
            break;
          }
          case 186: {
            Destspec = input.ReadString();
            break;
          }
          case 192: {
            Outoftown = input.ReadBool();
            break;
          }
          case 202: {
            Schedule = input.ReadString();
            break;
          }
          case 210: {
            Schedule2 = input.ReadString();
            break;
          }
          case 218: {
            Schedule3 = input.ReadString();
            break;
          }
          case 226: {
            Schedule4 = input.ReadString();
            break;
          }
          case 234: {
            Schedule5 = input.ReadString();
            break;
          }
          case 240: {
            Calcnumdrivers = input.ReadBool();
            break;
          }
          case 250: {
            Type = input.ReadString();
            break;
          }
          case 256: {
            Numtype = input.ReadInt32();
            break;
          }
          case 266: {
            Capacity = input.ReadString();
            break;
          }
          case 274: {
            Addltype = input.ReadString();
            break;
          }
          case 280: {
            Numaddl = input.ReadInt32();
            break;
          }
          case 288: {
            Bill = input.ReadBool();
            break;
          }
          case 298: {
            Custspec = input.ReadString();
            break;
          }
          case 304: {
            Assigned = input.ReadBool();
            break;
          }
          case 312: {
            Billed = input.ReadBool();
            break;
          }
          case 322: {
            Billdate = input.ReadString();
            break;
          }
          case 328: {
            Canceled = input.ReadBool();
            break;
          }
          case 338: {
            Candate = input.ReadString();
            break;
          }
          case 344: {
            Numveh = input.ReadInt32();
            break;
          }
          case 352: {
            Dropret = input.ReadBool();
            break;
          }
          case 362: {
            Tripcom = input.ReadString();
            break;
          }
          case 368: {
            Autoassign = input.ReadBool();
            break;
          }
          case 378: {
            Po = input.ReadString();
            break;
          }
          case 386: {
            Tripcat = input.ReadString();
            break;
          }
          case 394: {
            Inttripnum = input.ReadString();
            break;
          }
          case 400: {
            Tripreqnum = input.ReadInt32();
            break;
          }
          case 413: {
            Amount1 = input.ReadFloat();
            break;
          }
          case 421: {
            Amount2 = input.ReadFloat();
            break;
          }
          case 429: {
            Amount3 = input.ReadFloat();
            break;
          }
          case 437: {
            Amount4 = input.ReadFloat();
            break;
          }
          case 445: {
            Amount5 = input.ReadFloat();
            break;
          }
          case 450: {
            Amounttxt1 = input.ReadString();
            break;
          }
          case 458: {
            Amounttxt2 = input.ReadString();
            break;
          }
          case 466: {
            Amounttxt3 = input.ReadString();
            break;
          }
          case 474: {
            Amounttxt4 = input.ReadString();
            break;
          }
          case 482: {
            Amounttxt5 = input.ReadString();
            break;
          }
          case 490: {
            Grade = input.ReadString();
            break;
          }
          case 496: {
            Split = input.ReadBool();
            break;
          }
          case 506: {
            InvoiceFormat = input.ReadString();
            break;
          }
          case 514: {
            InvoiceComment1 = input.ReadString();
            break;
          }
          case 520: {
            Multidest = input.ReadBool();
            break;
          }
          case 528: {
            Shuttle = input.ReadBool();
            break;
          }
          case 538: {
            TicketFormat = input.ReadString();
            break;
          }
          case 544: {
            Numchar = input.ReadInt32();
            break;
          }
          case 554: {
            RequestorEmail = input.ReadString();
            break;
          }
          case 562: {
            AdministratorEmail = input.ReadString();
            break;
          }
          case 570: {
            ApproverEmail = input.ReadString();
            break;
          }
          case 578: {
            DateEntered = input.ReadString();
            break;
          }
          case 586: {
            UserEntered = input.ReadString();
            break;
          }
          case 594: {
            DateLastchanged = input.ReadString();
            break;
          }
          case 602: {
            UserLastchanged = input.ReadString();
            break;
          }
          case 610: {
            User1 = input.ReadString();
            break;
          }
          case 618: {
            User2 = input.ReadString();
            break;
          }
          case 626: {
            Userdate1 = input.ReadString();
            break;
          }
          case 634: {
            Userdate2 = input.ReadString();
            break;
          }
          case 642: {
            SsmaTimeStamp = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetAllTripsReqRequiredRequest : pb::IMessage<GetAllTripsReqRequiredRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAllTripsReqRequiredRequest> _parser = new pb::MessageParser<GetAllTripsReqRequiredRequest>(() => new GetAllTripsReqRequiredRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllTripsReqRequiredRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DemoProject.Web.Protobufs.V1.TripreqrequiredReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllTripsReqRequiredRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllTripsReqRequiredRequest(GetAllTripsReqRequiredRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllTripsReqRequiredRequest Clone() {
      return new GetAllTripsReqRequiredRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllTripsReqRequiredRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllTripsReqRequiredRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllTripsReqRequiredRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class GetAllTripsReqRequiredResponse : pb::IMessage<GetAllTripsReqRequiredResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetAllTripsReqRequiredResponse> _parser = new pb::MessageParser<GetAllTripsReqRequiredResponse>(() => new GetAllTripsReqRequiredResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllTripsReqRequiredResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DemoProject.Web.Protobufs.V1.TripreqrequiredReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllTripsReqRequiredResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllTripsReqRequiredResponse(GetAllTripsReqRequiredResponse other) : this() {
      trips_ = other.trips_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllTripsReqRequiredResponse Clone() {
      return new GetAllTripsReqRequiredResponse(this);
    }

    /// <summary>Field number for the "Trips" field.</summary>
    public const int TripsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::DemoProject.Web.Protobufs.V1.TripReqRequired> _repeated_trips_codec
        = pb::FieldCodec.ForMessage(42, global::DemoProject.Web.Protobufs.V1.TripReqRequired.Parser);
    private readonly pbc::RepeatedField<global::DemoProject.Web.Protobufs.V1.TripReqRequired> trips_ = new pbc::RepeatedField<global::DemoProject.Web.Protobufs.V1.TripReqRequired>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DemoProject.Web.Protobufs.V1.TripReqRequired> Trips {
      get { return trips_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllTripsReqRequiredResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllTripsReqRequiredResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!trips_.Equals(other.trips_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= trips_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      trips_.WriteTo(output, _repeated_trips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      trips_.WriteTo(ref output, _repeated_trips_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += trips_.CalculateSize(_repeated_trips_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllTripsReqRequiredResponse other) {
      if (other == null) {
        return;
      }
      trips_.Add(other.trips_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            trips_.AddEntriesFrom(input, _repeated_trips_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 42: {
            trips_.AddEntriesFrom(ref input, _repeated_trips_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
